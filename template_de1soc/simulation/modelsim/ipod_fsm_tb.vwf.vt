// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/15/2020 11:47:34"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ipod_fsm
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ipod_fsm_vlg_sample_tst(
	addr_reset,
	aud_clk_22khz,
	clock,
	direction,
	end_address,
	pause,
	pico_done,
	read_data,
	reset,
	silent,
	start_address,
	start_read,
	timer_finish,
	sampler_tx
);
input  addr_reset;
input  aud_clk_22khz;
input  clock;
input  direction;
input [23:0] end_address;
input  pause;
input  pico_done;
input [31:0] read_data;
input  reset;
input  silent;
input [23:0] start_address;
input  start_read;
input  timer_finish;
output sampler_tx;

reg sample;
time current_time;
always @(addr_reset or aud_clk_22khz or clock or direction or end_address or pause or pico_done or read_data or reset or silent or start_address or start_read or timer_finish)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ipod_fsm_vlg_check_tst (
	address,
	aud_data_out,
	audio_finish,
	byteenable,
	mem_read,
	pico_flag,
	read_data_request,
	state,
	visual_start,
	sampler_rx
);
input [22:0] address;
input [7:0] aud_data_out;
input  audio_finish;
input [3:0] byteenable;
input  mem_read;
input  pico_flag;
input  read_data_request;
input [7:0] state;
input  visual_start;
input sampler_rx;

reg [22:0] address_expected;
reg [7:0] aud_data_out_expected;
reg  audio_finish_expected;
reg [3:0] byteenable_expected;
reg  mem_read_expected;
reg  pico_flag_expected;
reg  read_data_request_expected;
reg [7:0] state_expected;
reg  visual_start_expected;

reg [22:0] address_prev;
reg [7:0] aud_data_out_prev;
reg  audio_finish_prev;
reg [3:0] byteenable_prev;
reg  mem_read_prev;
reg  pico_flag_prev;
reg  read_data_request_prev;
reg [7:0] state_prev;
reg  visual_start_prev;

reg [22:0] address_expected_prev;
reg [7:0] aud_data_out_expected_prev;
reg  audio_finish_expected_prev;
reg [3:0] byteenable_expected_prev;
reg  mem_read_expected_prev;
reg  pico_flag_expected_prev;
reg  read_data_request_expected_prev;
reg [7:0] state_expected_prev;
reg  visual_start_expected_prev;

reg [22:0] last_address_exp;
reg [7:0] last_aud_data_out_exp;
reg  last_audio_finish_exp;
reg [3:0] last_byteenable_exp;
reg  last_mem_read_exp;
reg  last_pico_flag_exp;
reg  last_read_data_request_exp;
reg [7:0] last_state_exp;
reg  last_visual_start_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:9] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 9'b1;
end

// update real /o prevs

always @(trigger)
begin
	address_prev = address;
	aud_data_out_prev = aud_data_out;
	audio_finish_prev = audio_finish;
	byteenable_prev = byteenable;
	mem_read_prev = mem_read;
	pico_flag_prev = pico_flag;
	read_data_request_prev = read_data_request;
	state_prev = state;
	visual_start_prev = visual_start;
end

// update expected /o prevs

always @(trigger)
begin
	address_expected_prev = address_expected;
	aud_data_out_expected_prev = aud_data_out_expected;
	audio_finish_expected_prev = audio_finish_expected;
	byteenable_expected_prev = byteenable_expected;
	mem_read_expected_prev = mem_read_expected;
	pico_flag_expected_prev = pico_flag_expected;
	read_data_request_expected_prev = read_data_request_expected;
	state_expected_prev = state_expected;
	visual_start_expected_prev = visual_start_expected;
end


// expected address[ 22 ]
initial
begin
	address_expected[22] = 1'bX;
end 
// expected address[ 21 ]
initial
begin
	address_expected[21] = 1'bX;
end 
// expected address[ 20 ]
initial
begin
	address_expected[20] = 1'bX;
end 
// expected address[ 19 ]
initial
begin
	address_expected[19] = 1'bX;
end 
// expected address[ 18 ]
initial
begin
	address_expected[18] = 1'bX;
end 
// expected address[ 17 ]
initial
begin
	address_expected[17] = 1'bX;
end 
// expected address[ 16 ]
initial
begin
	address_expected[16] = 1'bX;
end 
// expected address[ 15 ]
initial
begin
	address_expected[15] = 1'bX;
end 
// expected address[ 14 ]
initial
begin
	address_expected[14] = 1'bX;
end 
// expected address[ 13 ]
initial
begin
	address_expected[13] = 1'bX;
end 
// expected address[ 12 ]
initial
begin
	address_expected[12] = 1'bX;
end 
// expected address[ 11 ]
initial
begin
	address_expected[11] = 1'bX;
end 
// expected address[ 10 ]
initial
begin
	address_expected[10] = 1'bX;
end 
// expected address[ 9 ]
initial
begin
	address_expected[9] = 1'bX;
end 
// expected address[ 8 ]
initial
begin
	address_expected[8] = 1'bX;
end 
// expected address[ 7 ]
initial
begin
	address_expected[7] = 1'bX;
end 
// expected address[ 6 ]
initial
begin
	address_expected[6] = 1'bX;
end 
// expected address[ 5 ]
initial
begin
	address_expected[5] = 1'bX;
end 
// expected address[ 4 ]
initial
begin
	address_expected[4] = 1'bX;
end 
// expected address[ 3 ]
initial
begin
	address_expected[3] = 1'bX;
end 
// expected address[ 2 ]
initial
begin
	address_expected[2] = 1'bX;
end 
// expected address[ 1 ]
initial
begin
	address_expected[1] = 1'bX;
end 
// expected address[ 0 ]
initial
begin
	address_expected[0] = 1'bX;
end 
// expected aud_data_out[ 7 ]
initial
begin
	aud_data_out_expected[7] = 1'bX;
end 
// expected aud_data_out[ 6 ]
initial
begin
	aud_data_out_expected[6] = 1'bX;
end 
// expected aud_data_out[ 5 ]
initial
begin
	aud_data_out_expected[5] = 1'bX;
end 
// expected aud_data_out[ 4 ]
initial
begin
	aud_data_out_expected[4] = 1'bX;
end 
// expected aud_data_out[ 3 ]
initial
begin
	aud_data_out_expected[3] = 1'bX;
end 
// expected aud_data_out[ 2 ]
initial
begin
	aud_data_out_expected[2] = 1'bX;
end 
// expected aud_data_out[ 1 ]
initial
begin
	aud_data_out_expected[1] = 1'bX;
end 
// expected aud_data_out[ 0 ]
initial
begin
	aud_data_out_expected[0] = 1'bX;
end 

// expected audio_finish
initial
begin
	audio_finish_expected = 1'bX;
end 
// expected byteenable[ 3 ]
initial
begin
	byteenable_expected[3] = 1'bX;
end 
// expected byteenable[ 2 ]
initial
begin
	byteenable_expected[2] = 1'bX;
end 
// expected byteenable[ 1 ]
initial
begin
	byteenable_expected[1] = 1'bX;
end 
// expected byteenable[ 0 ]
initial
begin
	byteenable_expected[0] = 1'bX;
end 

// expected mem_read
initial
begin
	mem_read_expected = 1'bX;
end 

// expected pico_flag
initial
begin
	pico_flag_expected = 1'bX;
end 

// expected read_data_request
initial
begin
	read_data_request_expected = 1'bX;
end 
// expected state[ 7 ]
initial
begin
	state_expected[7] = 1'bX;
end 
// expected state[ 6 ]
initial
begin
	state_expected[6] = 1'bX;
end 
// expected state[ 5 ]
initial
begin
	state_expected[5] = 1'bX;
end 
// expected state[ 4 ]
initial
begin
	state_expected[4] = 1'bX;
end 
// expected state[ 3 ]
initial
begin
	state_expected[3] = 1'bX;
end 
// expected state[ 2 ]
initial
begin
	state_expected[2] = 1'bX;
end 
// expected state[ 1 ]
initial
begin
	state_expected[1] = 1'bX;
end 
// expected state[ 0 ]
initial
begin
	state_expected[0] = 1'bX;
end 

// expected visual_start
initial
begin
	visual_start_expected = 1'bX;
end 
// generate trigger
always @(address_expected or address or aud_data_out_expected or aud_data_out or audio_finish_expected or audio_finish or byteenable_expected or byteenable or mem_read_expected or mem_read or pico_flag_expected or pico_flag or read_data_request_expected or read_data_request or state_expected or state or visual_start_expected or visual_start)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected address = %b | expected aud_data_out = %b | expected audio_finish = %b | expected byteenable = %b | expected mem_read = %b | expected pico_flag = %b | expected read_data_request = %b | expected state = %b | expected visual_start = %b | ",address_expected_prev,aud_data_out_expected_prev,audio_finish_expected_prev,byteenable_expected_prev,mem_read_expected_prev,pico_flag_expected_prev,read_data_request_expected_prev,state_expected_prev,visual_start_expected_prev);
	$display("| real address = %b | real aud_data_out = %b | real audio_finish = %b | real byteenable = %b | real mem_read = %b | real pico_flag = %b | real read_data_request = %b | real state = %b | real visual_start = %b | ",address_prev,aud_data_out_prev,audio_finish_prev,byteenable_prev,mem_read_prev,pico_flag_prev,read_data_request_prev,state_prev,visual_start_prev);
`endif
	if (
		( address_expected_prev[0] !== 1'bx ) && ( address_prev[0] !== address_expected_prev[0] )
		&& ((address_expected_prev[0] !== last_address_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[0] = address_expected_prev[0];
	end
	if (
		( address_expected_prev[1] !== 1'bx ) && ( address_prev[1] !== address_expected_prev[1] )
		&& ((address_expected_prev[1] !== last_address_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[1] = address_expected_prev[1];
	end
	if (
		( address_expected_prev[2] !== 1'bx ) && ( address_prev[2] !== address_expected_prev[2] )
		&& ((address_expected_prev[2] !== last_address_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[2] = address_expected_prev[2];
	end
	if (
		( address_expected_prev[3] !== 1'bx ) && ( address_prev[3] !== address_expected_prev[3] )
		&& ((address_expected_prev[3] !== last_address_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[3] = address_expected_prev[3];
	end
	if (
		( address_expected_prev[4] !== 1'bx ) && ( address_prev[4] !== address_expected_prev[4] )
		&& ((address_expected_prev[4] !== last_address_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[4] = address_expected_prev[4];
	end
	if (
		( address_expected_prev[5] !== 1'bx ) && ( address_prev[5] !== address_expected_prev[5] )
		&& ((address_expected_prev[5] !== last_address_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[5] = address_expected_prev[5];
	end
	if (
		( address_expected_prev[6] !== 1'bx ) && ( address_prev[6] !== address_expected_prev[6] )
		&& ((address_expected_prev[6] !== last_address_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[6] = address_expected_prev[6];
	end
	if (
		( address_expected_prev[7] !== 1'bx ) && ( address_prev[7] !== address_expected_prev[7] )
		&& ((address_expected_prev[7] !== last_address_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[7] = address_expected_prev[7];
	end
	if (
		( address_expected_prev[8] !== 1'bx ) && ( address_prev[8] !== address_expected_prev[8] )
		&& ((address_expected_prev[8] !== last_address_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[8] = address_expected_prev[8];
	end
	if (
		( address_expected_prev[9] !== 1'bx ) && ( address_prev[9] !== address_expected_prev[9] )
		&& ((address_expected_prev[9] !== last_address_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[9] = address_expected_prev[9];
	end
	if (
		( address_expected_prev[10] !== 1'bx ) && ( address_prev[10] !== address_expected_prev[10] )
		&& ((address_expected_prev[10] !== last_address_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[10] = address_expected_prev[10];
	end
	if (
		( address_expected_prev[11] !== 1'bx ) && ( address_prev[11] !== address_expected_prev[11] )
		&& ((address_expected_prev[11] !== last_address_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[11] = address_expected_prev[11];
	end
	if (
		( address_expected_prev[12] !== 1'bx ) && ( address_prev[12] !== address_expected_prev[12] )
		&& ((address_expected_prev[12] !== last_address_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[12] = address_expected_prev[12];
	end
	if (
		( address_expected_prev[13] !== 1'bx ) && ( address_prev[13] !== address_expected_prev[13] )
		&& ((address_expected_prev[13] !== last_address_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[13] = address_expected_prev[13];
	end
	if (
		( address_expected_prev[14] !== 1'bx ) && ( address_prev[14] !== address_expected_prev[14] )
		&& ((address_expected_prev[14] !== last_address_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[14] = address_expected_prev[14];
	end
	if (
		( address_expected_prev[15] !== 1'bx ) && ( address_prev[15] !== address_expected_prev[15] )
		&& ((address_expected_prev[15] !== last_address_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[15] = address_expected_prev[15];
	end
	if (
		( address_expected_prev[16] !== 1'bx ) && ( address_prev[16] !== address_expected_prev[16] )
		&& ((address_expected_prev[16] !== last_address_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[16] = address_expected_prev[16];
	end
	if (
		( address_expected_prev[17] !== 1'bx ) && ( address_prev[17] !== address_expected_prev[17] )
		&& ((address_expected_prev[17] !== last_address_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[17] = address_expected_prev[17];
	end
	if (
		( address_expected_prev[18] !== 1'bx ) && ( address_prev[18] !== address_expected_prev[18] )
		&& ((address_expected_prev[18] !== last_address_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[18] = address_expected_prev[18];
	end
	if (
		( address_expected_prev[19] !== 1'bx ) && ( address_prev[19] !== address_expected_prev[19] )
		&& ((address_expected_prev[19] !== last_address_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[19] = address_expected_prev[19];
	end
	if (
		( address_expected_prev[20] !== 1'bx ) && ( address_prev[20] !== address_expected_prev[20] )
		&& ((address_expected_prev[20] !== last_address_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[20] = address_expected_prev[20];
	end
	if (
		( address_expected_prev[21] !== 1'bx ) && ( address_prev[21] !== address_expected_prev[21] )
		&& ((address_expected_prev[21] !== last_address_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[21] = address_expected_prev[21];
	end
	if (
		( address_expected_prev[22] !== 1'bx ) && ( address_prev[22] !== address_expected_prev[22] )
		&& ((address_expected_prev[22] !== last_address_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[22] = address_expected_prev[22];
	end
	if (
		( aud_data_out_expected_prev[0] !== 1'bx ) && ( aud_data_out_prev[0] !== aud_data_out_expected_prev[0] )
		&& ((aud_data_out_expected_prev[0] !== last_aud_data_out_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aud_data_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aud_data_out_expected_prev);
		$display ("     Real value = %b", aud_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aud_data_out_exp[0] = aud_data_out_expected_prev[0];
	end
	if (
		( aud_data_out_expected_prev[1] !== 1'bx ) && ( aud_data_out_prev[1] !== aud_data_out_expected_prev[1] )
		&& ((aud_data_out_expected_prev[1] !== last_aud_data_out_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aud_data_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aud_data_out_expected_prev);
		$display ("     Real value = %b", aud_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aud_data_out_exp[1] = aud_data_out_expected_prev[1];
	end
	if (
		( aud_data_out_expected_prev[2] !== 1'bx ) && ( aud_data_out_prev[2] !== aud_data_out_expected_prev[2] )
		&& ((aud_data_out_expected_prev[2] !== last_aud_data_out_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aud_data_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aud_data_out_expected_prev);
		$display ("     Real value = %b", aud_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aud_data_out_exp[2] = aud_data_out_expected_prev[2];
	end
	if (
		( aud_data_out_expected_prev[3] !== 1'bx ) && ( aud_data_out_prev[3] !== aud_data_out_expected_prev[3] )
		&& ((aud_data_out_expected_prev[3] !== last_aud_data_out_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aud_data_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aud_data_out_expected_prev);
		$display ("     Real value = %b", aud_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aud_data_out_exp[3] = aud_data_out_expected_prev[3];
	end
	if (
		( aud_data_out_expected_prev[4] !== 1'bx ) && ( aud_data_out_prev[4] !== aud_data_out_expected_prev[4] )
		&& ((aud_data_out_expected_prev[4] !== last_aud_data_out_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aud_data_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aud_data_out_expected_prev);
		$display ("     Real value = %b", aud_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aud_data_out_exp[4] = aud_data_out_expected_prev[4];
	end
	if (
		( aud_data_out_expected_prev[5] !== 1'bx ) && ( aud_data_out_prev[5] !== aud_data_out_expected_prev[5] )
		&& ((aud_data_out_expected_prev[5] !== last_aud_data_out_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aud_data_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aud_data_out_expected_prev);
		$display ("     Real value = %b", aud_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aud_data_out_exp[5] = aud_data_out_expected_prev[5];
	end
	if (
		( aud_data_out_expected_prev[6] !== 1'bx ) && ( aud_data_out_prev[6] !== aud_data_out_expected_prev[6] )
		&& ((aud_data_out_expected_prev[6] !== last_aud_data_out_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aud_data_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aud_data_out_expected_prev);
		$display ("     Real value = %b", aud_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aud_data_out_exp[6] = aud_data_out_expected_prev[6];
	end
	if (
		( aud_data_out_expected_prev[7] !== 1'bx ) && ( aud_data_out_prev[7] !== aud_data_out_expected_prev[7] )
		&& ((aud_data_out_expected_prev[7] !== last_aud_data_out_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aud_data_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aud_data_out_expected_prev);
		$display ("     Real value = %b", aud_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aud_data_out_exp[7] = aud_data_out_expected_prev[7];
	end
	if (
		( audio_finish_expected_prev !== 1'bx ) && ( audio_finish_prev !== audio_finish_expected_prev )
		&& ((audio_finish_expected_prev !== last_audio_finish_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port audio_finish :: @time = %t",  $realtime);
		$display ("     Expected value = %b", audio_finish_expected_prev);
		$display ("     Real value = %b", audio_finish_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_audio_finish_exp = audio_finish_expected_prev;
	end
	if (
		( byteenable_expected_prev[0] !== 1'bx ) && ( byteenable_prev[0] !== byteenable_expected_prev[0] )
		&& ((byteenable_expected_prev[0] !== last_byteenable_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port byteenable[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", byteenable_expected_prev);
		$display ("     Real value = %b", byteenable_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_byteenable_exp[0] = byteenable_expected_prev[0];
	end
	if (
		( byteenable_expected_prev[1] !== 1'bx ) && ( byteenable_prev[1] !== byteenable_expected_prev[1] )
		&& ((byteenable_expected_prev[1] !== last_byteenable_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port byteenable[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", byteenable_expected_prev);
		$display ("     Real value = %b", byteenable_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_byteenable_exp[1] = byteenable_expected_prev[1];
	end
	if (
		( byteenable_expected_prev[2] !== 1'bx ) && ( byteenable_prev[2] !== byteenable_expected_prev[2] )
		&& ((byteenable_expected_prev[2] !== last_byteenable_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port byteenable[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", byteenable_expected_prev);
		$display ("     Real value = %b", byteenable_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_byteenable_exp[2] = byteenable_expected_prev[2];
	end
	if (
		( byteenable_expected_prev[3] !== 1'bx ) && ( byteenable_prev[3] !== byteenable_expected_prev[3] )
		&& ((byteenable_expected_prev[3] !== last_byteenable_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port byteenable[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", byteenable_expected_prev);
		$display ("     Real value = %b", byteenable_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_byteenable_exp[3] = byteenable_expected_prev[3];
	end
	if (
		( mem_read_expected_prev !== 1'bx ) && ( mem_read_prev !== mem_read_expected_prev )
		&& ((mem_read_expected_prev !== last_mem_read_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_read :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_read_expected_prev);
		$display ("     Real value = %b", mem_read_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_mem_read_exp = mem_read_expected_prev;
	end
	if (
		( pico_flag_expected_prev !== 1'bx ) && ( pico_flag_prev !== pico_flag_expected_prev )
		&& ((pico_flag_expected_prev !== last_pico_flag_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pico_flag :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pico_flag_expected_prev);
		$display ("     Real value = %b", pico_flag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pico_flag_exp = pico_flag_expected_prev;
	end
	if (
		( read_data_request_expected_prev !== 1'bx ) && ( read_data_request_prev !== read_data_request_expected_prev )
		&& ((read_data_request_expected_prev !== last_read_data_request_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_request :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_request_expected_prev);
		$display ("     Real value = %b", read_data_request_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_read_data_request_exp = read_data_request_expected_prev;
	end
	if (
		( state_expected_prev[0] !== 1'bx ) && ( state_prev[0] !== state_expected_prev[0] )
		&& ((state_expected_prev[0] !== last_state_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_state_exp[0] = state_expected_prev[0];
	end
	if (
		( state_expected_prev[1] !== 1'bx ) && ( state_prev[1] !== state_expected_prev[1] )
		&& ((state_expected_prev[1] !== last_state_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_state_exp[1] = state_expected_prev[1];
	end
	if (
		( state_expected_prev[2] !== 1'bx ) && ( state_prev[2] !== state_expected_prev[2] )
		&& ((state_expected_prev[2] !== last_state_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_state_exp[2] = state_expected_prev[2];
	end
	if (
		( state_expected_prev[3] !== 1'bx ) && ( state_prev[3] !== state_expected_prev[3] )
		&& ((state_expected_prev[3] !== last_state_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_state_exp[3] = state_expected_prev[3];
	end
	if (
		( state_expected_prev[4] !== 1'bx ) && ( state_prev[4] !== state_expected_prev[4] )
		&& ((state_expected_prev[4] !== last_state_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_state_exp[4] = state_expected_prev[4];
	end
	if (
		( state_expected_prev[5] !== 1'bx ) && ( state_prev[5] !== state_expected_prev[5] )
		&& ((state_expected_prev[5] !== last_state_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_state_exp[5] = state_expected_prev[5];
	end
	if (
		( state_expected_prev[6] !== 1'bx ) && ( state_prev[6] !== state_expected_prev[6] )
		&& ((state_expected_prev[6] !== last_state_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_state_exp[6] = state_expected_prev[6];
	end
	if (
		( state_expected_prev[7] !== 1'bx ) && ( state_prev[7] !== state_expected_prev[7] )
		&& ((state_expected_prev[7] !== last_state_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_state_exp[7] = state_expected_prev[7];
	end
	if (
		( visual_start_expected_prev !== 1'bx ) && ( visual_start_prev !== visual_start_expected_prev )
		&& ((visual_start_expected_prev !== last_visual_start_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port visual_start :: @time = %t",  $realtime);
		$display ("     Expected value = %b", visual_start_expected_prev);
		$display ("     Real value = %b", visual_start_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_visual_start_exp = visual_start_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module ipod_fsm_vlg_vec_tst();
// constants                                           
// general purpose registers
reg addr_reset;
reg aud_clk_22khz;
reg clock;
reg direction;
reg [23:0] end_address;
reg pause;
reg pico_done;
reg [31:0] read_data;
reg reset;
reg silent;
reg [23:0] start_address;
reg start_read;
reg timer_finish;
// wires                                               
wire [22:0] address;
wire [7:0] aud_data_out;
wire audio_finish;
wire [3:0] byteenable;
wire mem_read;
wire pico_flag;
wire read_data_request;
wire [7:0] state;
wire visual_start;

wire sampler;                             

// assign statements (if any)                          
ipod_fsm i1 (
// port map - connection between master ports and signals/registers   
	.addr_reset(addr_reset),
	.address(address),
	.aud_clk_22khz(aud_clk_22khz),
	.aud_data_out(aud_data_out),
	.audio_finish(audio_finish),
	.byteenable(byteenable),
	.clock(clock),
	.direction(direction),
	.end_address(end_address),
	.mem_read(mem_read),
	.pause(pause),
	.pico_done(pico_done),
	.pico_flag(pico_flag),
	.read_data(read_data),
	.read_data_request(read_data_request),
	.reset(reset),
	.silent(silent),
	.start_address(start_address),
	.start_read(start_read),
	.state(state),
	.timer_finish(timer_finish),
	.visual_start(visual_start)
);

// addr_reset
initial
begin
	addr_reset = 1'b0;
end 

// aud_clk_22khz
initial
begin
	repeat(15)
	begin
		aud_clk_22khz = 1'b0;
		aud_clk_22khz = #33000 1'b1;
		# 33000;
	end
	aud_clk_22khz = 1'b0;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	#10000;
end 

// direction
initial
begin
	direction = 1'b0;
end 
// end_address[ 23 ]
initial
begin
	end_address[23] = 1'b0;
end 
// end_address[ 22 ]
initial
begin
	end_address[22] = 1'b0;
end 
// end_address[ 21 ]
initial
begin
	end_address[21] = 1'b0;
end 
// end_address[ 20 ]
initial
begin
	end_address[20] = 1'b0;
end 
// end_address[ 19 ]
initial
begin
	end_address[19] = 1'b0;
end 
// end_address[ 18 ]
initial
begin
	end_address[18] = 1'b0;
end 
// end_address[ 17 ]
initial
begin
	end_address[17] = 1'b0;
end 
// end_address[ 16 ]
initial
begin
	end_address[16] = 1'b0;
end 
// end_address[ 15 ]
initial
begin
	end_address[15] = 1'b0;
end 
// end_address[ 14 ]
initial
begin
	end_address[14] = 1'b0;
end 
// end_address[ 13 ]
initial
begin
	end_address[13] = 1'b0;
end 
// end_address[ 12 ]
initial
begin
	end_address[12] = 1'b0;
end 
// end_address[ 11 ]
initial
begin
	end_address[11] = 1'b0;
end 
// end_address[ 10 ]
initial
begin
	end_address[10] = 1'b0;
end 
// end_address[ 9 ]
initial
begin
	end_address[9] = 1'b0;
end 
// end_address[ 8 ]
initial
begin
	end_address[8] = 1'b0;
end 
// end_address[ 7 ]
initial
begin
	end_address[7] = 1'b0;
end 
// end_address[ 6 ]
initial
begin
	end_address[6] = 1'b0;
end 
// end_address[ 5 ]
initial
begin
	end_address[5] = 1'b0;
end 
// end_address[ 4 ]
initial
begin
	end_address[4] = 1'b0;
end 
// end_address[ 3 ]
initial
begin
	end_address[3] = 1'b0;
end 
// end_address[ 2 ]
initial
begin
	end_address[2] = 1'b0;
end 
// end_address[ 1 ]
initial
begin
	end_address[1] = 1'b0;
end 
// end_address[ 0 ]
initial
begin
	end_address[0] = 1'b0;
end 

// pause
initial
begin
	pause = 1'b0;
	pause = #100000 1'b1;
	pause = #70000 1'b0;
end 

// pico_done
initial
begin
	pico_done = 1'b0;
	pico_done = #2402 1'b1;
	pico_done = #8800 1'b0;
	pico_done = #8798 1'b1;
	pico_done = #5 1'b0;
	pico_done = #6500 1'b1;
	pico_done = #4357 1'b0;
	pico_done = #1367 1'b1;
	pico_done = #1966 1'b0;
	pico_done = #1367 1'b1;
	pico_done = #1966 1'b0;
	pico_done = #1367 1'b1;
	pico_done = #1105 1'b0;
	pico_done = #1276 1'b1;
	# 1033;
	repeat(2)
	begin
		pico_done = 1'b0;
		pico_done = #2300 1'b1;
		# 1033;
	end
	pico_done = 1'b0;
	pico_done = #5314 1'b1;
	pico_done = #3100 1'b0;
	pico_done = #8471 1'b1;
	pico_done = #4000 1'b0;
	pico_done = #6000 1'b1;
	pico_done = #4000 1'b0;
	pico_done = #140 1'b1;
	# 1059;
	repeat(2)
	begin
		pico_done = 1'b0;
		pico_done = #1967 1'b1;
		# 1366;
	end
	pico_done = 1'b0;
	pico_done = #1967 1'b1;
	pico_done = #308 1'b0;
	pico_done = #618 1'b1;
	# 1266;
	repeat(2)
	begin
		pico_done = 1'b0;
		pico_done = #2067 1'b1;
		# 1266;
	end
	pico_done = 1'b0;
	pico_done = #1450 1'b1;
	pico_done = #369 1'b0;
	pico_done = #2700 1'b1;
	pico_done = #2300 1'b0;
	pico_done = #2700 1'b1;
	pico_done = #1931 1'b0;
	pico_done = #1601 1'b1;
	# 1066;
	repeat(2)
	begin
		pico_done = 1'b0;
		pico_done = #2267 1'b1;
		# 1066;
	end
	pico_done = 1'b0;
	pico_done = #667 1'b1;
	pico_done = #1771 1'b0;
	pico_done = #3050 1'b1;
	pico_done = #1950 1'b0;
	pico_done = #3050 1'b1;
	pico_done = #8747 1'b0;
	pico_done = #10200 1'b1;
	pico_done = #1236 1'b0;
	pico_done = #4100 1'b1;
	pico_done = #5896 1'b0;
	pico_done = #4040 1'b1;
	# 2199;
	repeat(2)
	begin
		pico_done = 1'b0;
		pico_done = #4467 1'b1;
		# 2199;
	end
	pico_done = 1'b0;
	pico_done = #5760 1'b1;
	pico_done = #4500 1'b0;
	pico_done = #5500 1'b1;
	pico_done = #4500 1'b0;
	pico_done = #1095 1'b1;
	# 1333;
	repeat(2)
	begin
		pico_done = 1'b0;
		pico_done = #2000 1'b1;
		# 1333;
	end
	pico_done = 1'b0;
	pico_done = #3433 1'b1;
	pico_done = #4500 1'b0;
	pico_done = #5804 1'b1;
	pico_done = #3600 1'b0;
	pico_done = #3738 1'b1;
	# 759;
	repeat(2)
	begin
		pico_done = 1'b0;
		pico_done = #1800 1'b1;
		# 1533;
	end
	pico_done = 1'b0;
	pico_done = #1800 1'b1;
	pico_done = #775 1'b0;
	pico_done = #1904 1'b1;
	pico_done = #7400 1'b0;
	pico_done = #10696 1'b1;
	# 421;
	repeat(2)
	begin
		pico_done = 1'b0;
		pico_done = #1334 1'b1;
		# 1999;
	end
	pico_done = 1'b0;
	pico_done = #1334 1'b1;
	pico_done = #2847 1'b0;
	pico_done = #1767 1'b1;
	pico_done = #1566 1'b0;
	pico_done = #1767 1'b1;
	pico_done = #1566 1'b0;
	pico_done = #1767 1'b1;
	pico_done = #299 1'b0;
	pico_done = #78 1'b1;
	pico_done = #1950 1'b0;
	pico_done = #3050 1'b1;
	pico_done = #1950 1'b0;
	pico_done = #2972 1'b1;
	pico_done = #3002 1'b0;
	pico_done = #10200 1'b1;
	pico_done = #9203 1'b0;
	pico_done = #2200 1'b1;
	pico_done = #2800 1'b0;
	pico_done = #2200 1'b1;
	pico_done = #395 1'b0;
	pico_done = #2875 1'b1;
	# 2399;
	repeat(2)
	begin
		pico_done = 1'b0;
		pico_done = #4267 1'b1;
		# 2399;
	end
	pico_done = 1'b0;
	pico_done = #1394 1'b1;
	# 820;
	repeat(2)
	begin
		pico_done = 1'b0;
		pico_done = #2667 1'b1;
		# 3999;
	end
	pico_done = 1'b0;
	pico_done = #2667 1'b1;
	pico_done = #4478 1'b0;
	pico_done = #4333 1'b1;
	pico_done = #2333 1'b0;
	pico_done = #4333 1'b1;
	pico_done = #2333 1'b0;
	pico_done = #4333 1'b1;
	pico_done = #3250 1'b0;
	pico_done = #4333 1'b1;
	pico_done = #2333 1'b0;
	pico_done = #4333 1'b1;
	pico_done = #2333 1'b0;
	pico_done = #4333 1'b1;
	pico_done = #123 1'b0;
	pico_done = #4887 1'b1;
	pico_done = #4000 1'b0;
	pico_done = #6000 1'b1;
	pico_done = #4000 1'b0;
	pico_done = #1115 1'b1;
	# 1099;
	repeat(2)
	begin
		pico_done = 1'b0;
		pico_done = #2234 1'b1;
		# 1099;
	end
	pico_done = 1'b0;
	pico_done = #2233 1'b1;
	pico_done = #2850 1'b0;
	pico_done = #2050 1'b1;
	pico_done = #2950 1'b0;
	pico_done = #2050 1'b1;
	pico_done = #100 1'b0;
	pico_done = #6195 1'b1;
	pico_done = #9000 1'b0;
	pico_done = #8751 1'b1;
	pico_done = #8600 1'b0;
	pico_done = #8484 1'b1;
	pico_done = #3700 1'b0;
	pico_done = #8421 1'b1;
	pico_done = #4900 1'b0;
	pico_done = #5100 1'b1;
	pico_done = #4900 1'b0;
	pico_done = #1949 1'b1;
	pico_done = #941 1'b0;
	pico_done = #5400 1'b1;
	pico_done = #3998 1'b0;
	pico_done = #6800 1'b1;
	pico_done = #3200 1'b0;
	pico_done = #6800 1'b1;
	pico_done = #2861 1'b0;
	pico_done = #2614 1'b1;
	pico_done = #3200 1'b0;
	pico_done = #6800 1'b1;
	pico_done = #3200 1'b0;
	pico_done = #4449 1'b1;
	pico_done = #4800 1'b0;
	pico_done = #7995 1'b1;
	pico_done = #1800 1'b0;
	pico_done = #3200 1'b1;
	pico_done = #1800 1'b0;
	pico_done = #861 1'b1;
	pico_done = #11400 1'b0;
	pico_done = #8229 1'b1;
	# 1933;
	repeat(2)
	begin
		pico_done = 1'b0;
		pico_done = #1400 1'b1;
		# 1933;
	end
	pico_done = 1'b0;
	pico_done = #1053 1'b1;
	pico_done = #4221 1'b0;
	pico_done = #4300 1'b1;
	pico_done = #1479 1'b0;
	pico_done = #3013 1'b1;
	pico_done = #3400 1'b0;
	pico_done = #6600 1'b1;
	pico_done = #3400 1'b0;
	pico_done = #3587 1'b1;
	# 203;
	repeat(2)
	begin
		pico_done = 1'b0;
		pico_done = #1734 1'b1;
		# 1599;
	end
	pico_done = 1'b0;
	pico_done = #1734 1'b1;
	pico_done = #1397 1'b0;
	pico_done = #5019 1'b1;
	pico_done = #3600 1'b0;
	pico_done = #4819 1'b1;
	pico_done = #4500 1'b0;
	pico_done = #2062 1'b1;
	pico_done = #779 1'b0;
	pico_done = #3500 1'b1;
	pico_done = #1500 1'b0;
	pico_done = #3500 1'b1;
	pico_done = #721 1'b0;
	pico_done = #1535 1'b1;
	# 1533;
	repeat(2)
	begin
		pico_done = 1'b0;
		pico_done = #1800 1'b1;
		# 1533;
	end
	pico_done = 1'b0;
	pico_done = #266 1'b1;
	pico_done = #1342 1'b0;
	pico_done = #2800 1'b1;
	pico_done = #2200 1'b0;
	pico_done = #2800 1'b1;
	pico_done = #858 1'b0;
	pico_done = #653 1'b1;
	# 1099;
	repeat(2)
	begin
		pico_done = 1'b0;
		pico_done = #2234 1'b1;
		# 1099;
	end
	pico_done = 1'b0;
	pico_done = #6532 1'b1;
	pico_done = #4900 1'b0;
	pico_done = #5100 1'b1;
	pico_done = #4900 1'b0;
	pico_done = #2599 1'b1;
	pico_done = #5700 1'b0;
	pico_done = #4300 1'b1;
	pico_done = #5700 1'b0;
	pico_done = #6331 1'b1;
	pico_done = #7800 1'b0;
	pico_done = #7720 1'b1;
	pico_done = #2601 1'b0;
	pico_done = #11800 1'b1;
	pico_done = #11086 1'b0;
	pico_done = #4300 1'b1;
	pico_done = #3611 1'b0;
	pico_done = #5400 1'b1;
	pico_done = #4600 1'b0;
	pico_done = #5400 1'b1;
	pico_done = #8008 1'b0;
	pico_done = #12000 1'b1;
	pico_done = #2144 1'b0;
	pico_done = #2850 1'b1;
	pico_done = #2150 1'b0;
	pico_done = #2850 1'b1;
	pico_done = #2893 1'b0;
	pico_done = #2650 1'b1;
	pico_done = #2350 1'b0;
	pico_done = #2650 1'b1;
	pico_done = #657 1'b0;
	pico_done = #319 1'b1;
	# 1899;
	repeat(2)
	begin
		pico_done = 1'b0;
		pico_done = #1434 1'b1;
		# 1899;
	end
	pico_done = 1'b0;
	pico_done = #1116 1'b1;
	pico_done = #2677 1'b0;
	pico_done = #4400 1'b1;
	pico_done = #5600 1'b0;
	pico_done = #4400 1'b1;
	pico_done = #3705 1'b0;
	pico_done = #2400 1'b1;
	pico_done = #2600 1'b0;
	pico_done = #2400 1'b1;
	pico_done = #1818 1'b0;
	pico_done = #5596 1'b1;
	pico_done = #6200 1'b0;
	pico_done = #8856 1'b1;
	pico_done = #3300 1'b0;
	pico_done = #6700 1'b1;
	pico_done = #3300 1'b0;
	pico_done = #8027 1'b1;
	pico_done = #3000 1'b0;
	pico_done = #12449 1'b1;
	pico_done = #12000 1'b0;
	pico_done = #572 1'b1;
	pico_done = #3295 1'b0;
	pico_done = #13000 1'b1;
	pico_done = #3705 1'b0;
	pico_done = #2251 1'b1;
	pico_done = #3800 1'b0;
end 
// read_data[ 31 ]
initial
begin
	read_data[31] = 1'b0;
	read_data[31] = #200000 1'b1;
	read_data[31] = #100000 1'b0;
	read_data[31] = #100000 1'b1;
	read_data[31] = #100000 1'b0;
	read_data[31] = #200000 1'b1;
end 
// read_data[ 30 ]
initial
begin
	read_data[30] = 1'b1;
	read_data[30] = #200000 1'b0;
	read_data[30] = #100000 1'b1;
	read_data[30] = #100000 1'b0;
	read_data[30] = #100000 1'b1;
	read_data[30] = #100000 1'b0;
	read_data[30] = #100000 1'b1;
	read_data[30] = #100000 1'b0;
	read_data[30] = #100000 1'b1;
end 
// read_data[ 29 ]
initial
begin
	read_data[29] = 1'b1;
	read_data[29] = #800000 1'b0;
	read_data[29] = #100000 1'b1;
end 
// read_data[ 28 ]
initial
begin
	read_data[28] = 1'b1;
	read_data[28] = #100000 1'b0;
	read_data[28] = #200000 1'b1;
	read_data[28] = #600000 1'b0;
end 
// read_data[ 27 ]
initial
begin
	read_data[27] = 1'b1;
	read_data[27] = #100000 1'b0;
	read_data[27] = #200000 1'b1;
	read_data[27] = #300000 1'b0;
	read_data[27] = #200000 1'b1;
end 
// read_data[ 26 ]
initial
begin
	read_data[26] = 1'b0;
	read_data[26] = #500000 1'b1;
	read_data[26] = #300000 1'b0;
end 
// read_data[ 25 ]
initial
begin
	read_data[25] = 1'b0;
	read_data[25] = #100000 1'b1;
	read_data[25] = #200000 1'b0;
	read_data[25] = #100000 1'b1;
	read_data[25] = #300000 1'b0;
	read_data[25] = #100000 1'b1;
	read_data[25] = #100000 1'b0;
end 
// read_data[ 24 ]
initial
begin
	read_data[24] = 1'b0;
	read_data[24] = #300000 1'b1;
	read_data[24] = #400000 1'b0;
end 
// read_data[ 23 ]
initial
begin
	read_data[23] = 1'b0;
	read_data[23] = #200000 1'b1;
	read_data[23] = #300000 1'b0;
	read_data[23] = #100000 1'b1;
end 
// read_data[ 22 ]
initial
begin
	read_data[22] = 1'b0;
	read_data[22] = #200000 1'b1;
	read_data[22] = #200000 1'b0;
	read_data[22] = #100000 1'b1;
	read_data[22] = #100000 1'b0;
	read_data[22] = #100000 1'b1;
	read_data[22] = #200000 1'b0;
end 
// read_data[ 21 ]
initial
begin
	read_data[21] = 1'b0;
	read_data[21] = #100000 1'b1;
	read_data[21] = #100000 1'b0;
	read_data[21] = #200000 1'b1;
	read_data[21] = #100000 1'b0;
	read_data[21] = #400000 1'b1;
end 
// read_data[ 20 ]
initial
begin
	read_data[20] = 1'b1;
	read_data[20] = #100000 1'b0;
	read_data[20] = #100000 1'b1;
	read_data[20] = #200000 1'b0;
	read_data[20] = #100000 1'b1;
	read_data[20] = #400000 1'b0;
end 
// read_data[ 19 ]
initial
begin
	read_data[19] = 1'b1;
	read_data[19] = #300000 1'b0;
	read_data[19] = #200000 1'b1;
	read_data[19] = #100000 1'b0;
	read_data[19] = #100000 1'b1;
	read_data[19] = #100000 1'b0;
	read_data[19] = #100000 1'b1;
end 
// read_data[ 18 ]
initial
begin
	read_data[18] = 1'b1;
	read_data[18] = #600000 1'b0;
	read_data[18] = #200000 1'b1;
	read_data[18] = #100000 1'b0;
end 
// read_data[ 17 ]
initial
begin
	read_data[17] = 1'b0;
	read_data[17] = #100000 1'b1;
	read_data[17] = #100000 1'b0;
	read_data[17] = #100000 1'b1;
	read_data[17] = #200000 1'b0;
	read_data[17] = #200000 1'b1;
	read_data[17] = #100000 1'b0;
end 
// read_data[ 16 ]
initial
begin
	read_data[16] = 1'b0;
	read_data[16] = #100000 1'b1;
	read_data[16] = #200000 1'b0;
	read_data[16] = #100000 1'b1;
	read_data[16] = #100000 1'b0;
	read_data[16] = #400000 1'b1;
end 
// read_data[ 15 ]
initial
begin
	read_data[15] = 1'b0;
	read_data[15] = #200000 1'b1;
	read_data[15] = #100000 1'b0;
	read_data[15] = #300000 1'b1;
	read_data[15] = #200000 1'b0;
end 
// read_data[ 14 ]
initial
begin
	read_data[14] = 1'b1;
	read_data[14] = #200000 1'b0;
	read_data[14] = #200000 1'b1;
	read_data[14] = #500000 1'b0;
end 
// read_data[ 13 ]
initial
begin
	read_data[13] = 1'b0;
	read_data[13] = #300000 1'b1;
	read_data[13] = #100000 1'b0;
	read_data[13] = #200000 1'b1;
	read_data[13] = #200000 1'b0;
end 
// read_data[ 12 ]
initial
begin
	read_data[12] = 1'b0;
	read_data[12] = #500000 1'b1;
	read_data[12] = #200000 1'b0;
	read_data[12] = #100000 1'b1;
end 
// read_data[ 11 ]
initial
begin
	read_data[11] = 1'b0;
	read_data[11] = #300000 1'b1;
	read_data[11] = #300000 1'b0;
	read_data[11] = #100000 1'b1;
	read_data[11] = #200000 1'b0;
end 
// read_data[ 10 ]
initial
begin
	read_data[10] = 1'b1;
	read_data[10] = #200000 1'b0;
	read_data[10] = #100000 1'b1;
	read_data[10] = #100000 1'b0;
	read_data[10] = #100000 1'b1;
	read_data[10] = #300000 1'b0;
	read_data[10] = #100000 1'b1;
end 
// read_data[ 9 ]
initial
begin
	read_data[9] = 1'b0;
	read_data[9] = #300000 1'b1;
	read_data[9] = #100000 1'b0;
	read_data[9] = #100000 1'b1;
	read_data[9] = #200000 1'b0;
	read_data[9] = #200000 1'b1;
end 
// read_data[ 8 ]
initial
begin
	read_data[8] = 1'b1;
	read_data[8] = #100000 1'b0;
	read_data[8] = #700000 1'b1;
end 
// read_data[ 7 ]
initial
begin
	read_data[7] = 1'b0;
	read_data[7] = #100000 1'b1;
	read_data[7] = #100000 1'b0;
	read_data[7] = #100000 1'b1;
	read_data[7] = #300000 1'b0;
	read_data[7] = #200000 1'b1;
end 
// read_data[ 6 ]
initial
begin
	read_data[6] = 1'b1;
	read_data[6] = #200000 1'b0;
	read_data[6] = #200000 1'b1;
	read_data[6] = #300000 1'b0;
	read_data[6] = #100000 1'b1;
	read_data[6] = #100000 1'b0;
end 
// read_data[ 5 ]
initial
begin
	read_data[5] = 1'b1;
	read_data[5] = #600000 1'b0;
	read_data[5] = #100000 1'b1;
	read_data[5] = #200000 1'b0;
end 
// read_data[ 4 ]
initial
begin
	read_data[4] = 1'b1;
	read_data[4] = #100000 1'b0;
	read_data[4] = #100000 1'b1;
	read_data[4] = #100000 1'b0;
	read_data[4] = #100000 1'b1;
	read_data[4] = #100000 1'b0;
	read_data[4] = #100000 1'b1;
	read_data[4] = #100000 1'b0;
	read_data[4] = #100000 1'b1;
	read_data[4] = #100000 1'b0;
end 
// read_data[ 3 ]
initial
begin
	read_data[3] = 1'b0;
	read_data[3] = #100000 1'b1;
	read_data[3] = #300000 1'b0;
	read_data[3] = #100000 1'b1;
	read_data[3] = #200000 1'b0;
	read_data[3] = #200000 1'b1;
end 
// read_data[ 2 ]
initial
begin
	read_data[2] = 1'b0;
	read_data[2] = #500000 1'b1;
	read_data[2] = #100000 1'b0;
	read_data[2] = #200000 1'b1;
end 
// read_data[ 1 ]
initial
begin
	read_data[1] = 1'b0;
	read_data[1] = #100000 1'b1;
	read_data[1] = #200000 1'b0;
	read_data[1] = #200000 1'b1;
	read_data[1] = #100000 1'b0;
	read_data[1] = #100000 1'b1;
	read_data[1] = #100000 1'b0;
end 
// read_data[ 0 ]
initial
begin
	read_data[0] = 1'b1;
	read_data[0] = #100000 1'b0;
	read_data[0] = #100000 1'b1;
	read_data[0] = #300000 1'b0;
	read_data[0] = #200000 1'b1;
	read_data[0] = #100000 1'b0;
	read_data[0] = #100000 1'b1;
end 

// reset
initial
begin
	reset = 1'b0;
end 

// silent
initial
begin
	silent = 1'b1;
	silent = #200000 1'b0;
	silent = #100000 1'b1;
	silent = #200000 1'b0;
end 
// start_address[ 23 ]
initial
begin
	start_address[23] = 1'b1;
	start_address[23] = #700000 1'b0;
end 
// start_address[ 22 ]
initial
begin
	start_address[22] = 1'b0;
	start_address[22] = #100000 1'b1;
	start_address[22] = #200000 1'b0;
	start_address[22] = #100000 1'b1;
	start_address[22] = #300000 1'b0;
	start_address[22] = #100000 1'b1;
end 
// start_address[ 21 ]
initial
begin
	start_address[21] = 1'b1;
	start_address[21] = #200000 1'b0;
	start_address[21] = #300000 1'b1;
	start_address[21] = #100000 1'b0;
end 
// start_address[ 20 ]
initial
begin
	start_address[20] = 1'b0;
	start_address[20] = #100000 1'b1;
	start_address[20] = #200000 1'b0;
	start_address[20] = #100000 1'b1;
	start_address[20] = #200000 1'b0;
	start_address[20] = #100000 1'b1;
end 
// start_address[ 19 ]
initial
begin
	start_address[19] = 1'b0;
	start_address[19] = #400000 1'b1;
	start_address[19] = #200000 1'b0;
	start_address[19] = #100000 1'b1;
	start_address[19] = #200000 1'b0;
end 
// start_address[ 18 ]
initial
begin
	start_address[18] = 1'b1;
	start_address[18] = #100000 1'b0;
	start_address[18] = #100000 1'b1;
	start_address[18] = #100000 1'b0;
	start_address[18] = #100000 1'b1;
	start_address[18] = #200000 1'b0;
	start_address[18] = #200000 1'b1;
end 
// start_address[ 17 ]
initial
begin
	start_address[17] = 1'b0;
	start_address[17] = #400000 1'b1;
	start_address[17] = #200000 1'b0;
	start_address[17] = #200000 1'b1;
end 
// start_address[ 16 ]
initial
begin
	start_address[16] = 1'b0;
	start_address[16] = #400000 1'b1;
	start_address[16] = #500000 1'b0;
end 
// start_address[ 15 ]
initial
begin
	start_address[15] = 1'b1;
	start_address[15] = #200000 1'b0;
	start_address[15] = #300000 1'b1;
	start_address[15] = #200000 1'b0;
	start_address[15] = #100000 1'b1;
end 
// start_address[ 14 ]
initial
begin
	start_address[14] = 1'b1;
	start_address[14] = #100000 1'b0;
	start_address[14] = #100000 1'b1;
	start_address[14] = #100000 1'b0;
	start_address[14] = #400000 1'b1;
end 
// start_address[ 13 ]
initial
begin
	start_address[13] = 1'b0;
	start_address[13] = #200000 1'b1;
	start_address[13] = #100000 1'b0;
	start_address[13] = #500000 1'b1;
	start_address[13] = #100000 1'b0;
end 
// start_address[ 12 ]
initial
begin
	start_address[12] = 1'b1;
	start_address[12] = #200000 1'b0;
	start_address[12] = #200000 1'b1;
	start_address[12] = #100000 1'b0;
	start_address[12] = #200000 1'b1;
	start_address[12] = #100000 1'b0;
end 
// start_address[ 11 ]
initial
begin
	start_address[11] = 1'b0;
	start_address[11] = #200000 1'b1;
	start_address[11] = #100000 1'b0;
	start_address[11] = #100000 1'b1;
	start_address[11] = #100000 1'b0;
	start_address[11] = #200000 1'b1;
	start_address[11] = #100000 1'b0;
	start_address[11] = #100000 1'b1;
end 
// start_address[ 10 ]
initial
begin
	start_address[10] = 1'b1;
	start_address[10] = #100000 1'b0;
	start_address[10] = #100000 1'b1;
	start_address[10] = #300000 1'b0;
	start_address[10] = #100000 1'b1;
	start_address[10] = #300000 1'b0;
end 
// start_address[ 9 ]
initial
begin
	start_address[9] = 1'b1;
	start_address[9] = #100000 1'b0;
	start_address[9] = #200000 1'b1;
	start_address[9] = #100000 1'b0;
	start_address[9] = #100000 1'b1;
end 
// start_address[ 8 ]
initial
begin
	start_address[8] = 1'b1;
	start_address[8] = #400000 1'b0;
	start_address[8] = #300000 1'b1;
	start_address[8] = #200000 1'b0;
end 
// start_address[ 7 ]
initial
begin
	start_address[7] = 1'b1;
	start_address[7] = #100000 1'b0;
	start_address[7] = #100000 1'b1;
	start_address[7] = #100000 1'b0;
	start_address[7] = #200000 1'b1;
	start_address[7] = #200000 1'b0;
	start_address[7] = #100000 1'b1;
end 
// start_address[ 6 ]
initial
begin
	start_address[6] = 1'b1;
	start_address[6] = #100000 1'b0;
	start_address[6] = #300000 1'b1;
	start_address[6] = #100000 1'b0;
	start_address[6] = #100000 1'b1;
	start_address[6] = #200000 1'b0;
end 
// start_address[ 5 ]
initial
begin
	start_address[5] = 1'b1;
	start_address[5] = #100000 1'b0;
	start_address[5] = #200000 1'b1;
	start_address[5] = #400000 1'b0;
	start_address[5] = #200000 1'b1;
end 
// start_address[ 4 ]
initial
begin
	start_address[4] = 1'b0;
	start_address[4] = #300000 1'b1;
	start_address[4] = #100000 1'b0;
	start_address[4] = #200000 1'b1;
	start_address[4] = #300000 1'b0;
end 
// start_address[ 3 ]
initial
begin
	start_address[3] = 1'b1;
	start_address[3] = #100000 1'b0;
	start_address[3] = #300000 1'b1;
	start_address[3] = #200000 1'b0;
	start_address[3] = #100000 1'b1;
	start_address[3] = #100000 1'b0;
end 
// start_address[ 2 ]
initial
begin
	start_address[2] = 1'b1;
	start_address[2] = #200000 1'b0;
	start_address[2] = #100000 1'b1;
	start_address[2] = #100000 1'b0;
	start_address[2] = #100000 1'b1;
	start_address[2] = #100000 1'b0;
	start_address[2] = #100000 1'b1;
	start_address[2] = #200000 1'b0;
end 
// start_address[ 1 ]
initial
begin
	start_address[1] = 1'b0;
	start_address[1] = #200000 1'b1;
	start_address[1] = #200000 1'b0;
	start_address[1] = #100000 1'b1;
	start_address[1] = #200000 1'b0;
	start_address[1] = #100000 1'b1;
	start_address[1] = #100000 1'b0;
end 
// start_address[ 0 ]
initial
begin
	start_address[0] = 1'b0;
	start_address[0] = #300000 1'b1;
	start_address[0] = #100000 1'b0;
	start_address[0] = #100000 1'b1;
	start_address[0] = #100000 1'b0;
	start_address[0] = #100000 1'b1;
	start_address[0] = #100000 1'b0;
end 

// start_read
initial
begin
	start_read = 1'b0;
	start_read = #1079 1'b1;
	# 2133;
	repeat(2)
	begin
		start_read = 1'b0;
		start_read = #4533 1'b1;
		# 2133;
	end
	start_read = 1'b0;
	start_read = #3456 1'b1;
	# 708;
	repeat(2)
	begin
		start_read = 1'b0;
		start_read = #2000 1'b1;
		# 1333;
	end
	start_read = 1'b0;
	start_read = #2000 1'b1;
	start_read = #4475 1'b0;
	start_read = #12200 1'b1;
	start_read = #7664 1'b0;
	start_read = #4300 1'b1;
	start_read = #5700 1'b0;
	start_read = #4300 1'b1;
	start_read = #5144 1'b0;
	start_read = #5600 1'b1;
	start_read = #1759 1'b0;
	start_read = #11000 1'b1;
	start_read = #8484 1'b0;
	start_read = #2479 1'b1;
	start_read = #6000 1'b0;
	start_read = #5839 1'b1;
	start_read = #4700 1'b0;
	start_read = #5300 1'b1;
	start_read = #4700 1'b0;
	start_read = #2573 1'b1;
	# 1466;
	repeat(2)
	begin
		start_read = 1'b0;
		start_read = #1867 1'b1;
		# 1466;
	end
	start_read = 1'b0;
	start_read = #2681 1'b1;
	start_read = #5200 1'b0;
	start_read = #4800 1'b1;
	start_read = #5200 1'b0;
	start_read = #2396 1'b1;
	# 730;
	repeat(2)
	begin
		start_read = 1'b0;
		start_read = #2934 1'b1;
		# 3732;
	end
	start_read = 1'b0;
	start_read = #2934 1'b1;
	start_read = #3205 1'b0;
	start_read = #2067 1'b1;
	start_read = #1266 1'b0;
	start_read = #2067 1'b1;
	start_read = #1266 1'b0;
	start_read = #2067 1'b1;
	start_read = #1066 1'b0;
	start_read = #2902 1'b1;
	start_read = #5200 1'b0;
	start_read = #4800 1'b1;
	start_read = #5200 1'b0;
	start_read = #1898 1'b1;
	start_read = #1574 1'b0;
	start_read = #2800 1'b1;
	start_read = #2200 1'b0;
	start_read = #2800 1'b1;
	start_read = #878 1'b0;
	start_read = #3400 1'b1;
	start_read = #3266 1'b0;
	start_read = #3400 1'b1;
	start_read = #3266 1'b0;
	start_read = #3400 1'b1;
	start_read = #3016 1'b0;
	start_read = #1144 1'b1;
	start_read = #6200 1'b0;
	start_read = #18271 1'b1;
	start_read = #3200 1'b0;
	start_read = #4222 1'b1;
	# 2199;
	repeat(2)
	begin
		start_read = 1'b0;
		start_read = #4467 1'b1;
		# 2199;
	end
	start_read = 1'b0;
	start_read = #4123 1'b1;
	# 2666;
	repeat(2)
	begin
		start_read = 1'b0;
		start_read = #4000 1'b1;
		# 2666;
	end
	start_read = 1'b0;
	start_read = #4598 1'b1;
	start_read = #1600 1'b0;
	start_read = #3400 1'b1;
	start_read = #1600 1'b0;
	start_read = #888 1'b1;
	# 2999;
	repeat(2)
	begin
		start_read = 1'b0;
		start_read = #3667 1'b1;
		# 2999;
	end
	start_read = 1'b0;
	start_read = #7264 1'b1;
	start_read = #4100 1'b0;
	start_read = #5900 1'b1;
	start_read = #4100 1'b0;
	start_read = #1530 1'b1;
	start_read = #2938 1'b0;
	start_read = #7000 1'b1;
	start_read = #3000 1'b0;
	start_read = #7000 1'b1;
	start_read = #62 1'b0;
	start_read = #707 1'b1;
	# 1333;
	repeat(2)
	begin
		start_read = 1'b0;
		start_read = #2000 1'b1;
		# 1333;
	end
	start_read = 1'b0;
	start_read = #3127 1'b1;
	start_read = #2150 1'b0;
	start_read = #2850 1'b1;
	start_read = #2150 1'b0;
	start_read = #1017 1'b1;
	start_read = #5388 1'b0;
	start_read = #11600 1'b1;
	start_read = #6376 1'b0;
	start_read = #5900 1'b1;
	start_read = #4100 1'b0;
	start_read = #5900 1'b1;
	start_read = #6262 1'b0;
	start_read = #12400 1'b1;
	start_read = #2074 1'b0;
	start_read = #585 1'b1;
	# 1099;
	repeat(2)
	begin
		start_read = 1'b0;
		start_read = #2234 1'b1;
		# 1099;
	end
	start_read = 1'b0;
	start_read = #2459 1'b1;
	start_read = #3400 1'b0;
	start_read = #5791 1'b1;
	start_read = #462 1'b0;
	start_read = #2100 1'b1;
	start_read = #2900 1'b0;
	start_read = #2100 1'b1;
	start_read = #4202 1'b0;
	start_read = #1500 1'b1;
	start_read = #1833 1'b0;
	start_read = #1500 1'b1;
	start_read = #1833 1'b0;
	start_read = #1500 1'b1;
	start_read = #70 1'b0;
	start_read = #1506 1'b1;
	# 1566;
	repeat(2)
	begin
		start_read = 1'b0;
		start_read = #1767 1'b1;
		# 1566;
	end
	start_read = 1'b0;
	start_read = #262 1'b1;
	# 1161;
	repeat(2)
	begin
		start_read = 1'b0;
		start_read = #2734 1'b1;
		# 3932;
	end
	start_read = 1'b0;
	start_read = #2734 1'b1;
	start_read = #2773 1'b0;
	start_read = #2392 1'b1;
	start_read = #4000 1'b0;
	start_read = #6000 1'b1;
	start_read = #4000 1'b0;
	start_read = #3608 1'b1;
	start_read = #1176 1'b0;
	start_read = #4600 1'b1;
	start_read = #5400 1'b0;
	start_read = #4600 1'b1;
	start_read = #4224 1'b0;
	start_read = #6050 1'b1;
	start_read = #3300 1'b0;
	start_read = #2110 1'b1;
	start_read = #2750 1'b0;
	start_read = #2250 1'b1;
	start_read = #2750 1'b0;
	start_read = #958 1'b1;
	start_read = #3700 1'b0;
	start_read = #8441 1'b1;
	# 2533;
	repeat(2)
	begin
		start_read = 1'b0;
		start_read = #4133 1'b1;
		# 2533;
	end
	start_read = 1'b0;
	start_read = #1826 1'b1;
	start_read = #2184 1'b0;
	start_read = #4400 1'b1;
	start_read = #7039 1'b0;
	start_read = #13800 1'b1;
	start_read = #4140 1'b0;
	start_read = #4400 1'b1;
	start_read = #2266 1'b0;
	start_read = #4400 1'b1;
	start_read = #2266 1'b0;
	start_read = #4400 1'b1;
	start_read = #705 1'b0;
	start_read = #3372 1'b1;
	start_read = #3800 1'b0;
	start_read = #6868 1'b1;
	# 2399;
	repeat(2)
	begin
		start_read = 1'b0;
		start_read = #4267 1'b1;
		# 2399;
	end
	start_read = 1'b0;
	start_read = #2824 1'b1;
	start_read = #3700 1'b0;
	start_read = #6300 1'b1;
	start_read = #3700 1'b0;
	start_read = #3705 1'b1;
	start_read = #1891 1'b0;
	start_read = #9600 1'b1;
	start_read = #8509 1'b0;
	start_read = #3349 1'b1;
	# 2533;
	repeat(2)
	begin
		start_read = 1'b0;
		start_read = #4133 1'b1;
		# 2533;
	end
	start_read = 1'b0;
	start_read = #786 1'b1;
	start_read = #1218 1'b0;
	start_read = #3250 1'b1;
	start_read = #1750 1'b0;
	start_read = #3250 1'b1;
	start_read = #532 1'b0;
	start_read = #1117 1'b1;
	start_read = #1800 1'b0;
	start_read = #3200 1'b1;
	start_read = #1800 1'b0;
	start_read = #2083 1'b1;
	start_read = #3120 1'b0;
	start_read = #12200 1'b1;
	start_read = #4680 1'b0;
	start_read = #688 1'b1;
	# 1166;
	repeat(2)
	begin
		start_read = 1'b0;
		start_read = #2167 1'b1;
		# 1166;
	end
	start_read = 1'b0;
	start_read = #1480 1'b1;
	start_read = #868 1'b0;
	start_read = #5500 1'b1;
	start_read = #4500 1'b0;
	start_read = #5500 1'b1;
	start_read = #3632 1'b0;
	start_read = #878 1'b1;
	start_read = #2050 1'b0;
	start_read = #2950 1'b1;
	start_read = #2050 1'b0;
	start_read = #4428 1'b1;
	start_read = #6400 1'b0;
	start_read = #11244 1'b1;
	start_read = #1361 1'b0;
	start_read = #2000 1'b1;
	start_read = #3000 1'b0;
	start_read = #2000 1'b1;
	start_read = #2166 1'b0;
	start_read = #4700 1'b1;
	start_read = #5300 1'b0;
	start_read = #4700 1'b1;
	start_read = #4773 1'b0;
	start_read = #1642 1'b1;
	start_read = #1650 1'b0;
	start_read = #3350 1'b1;
	start_read = #1650 1'b0;
	start_read = #6881 1'b1;
	start_read = #8400 1'b0;
	start_read = #9967 1'b1;
	# 2399;
	repeat(2)
	begin
		start_read = 1'b0;
		start_read = #4267 1'b1;
		# 2399;
	end
	start_read = 1'b0;
	start_read = #729 1'b1;
	start_read = #458 1'b0;
	start_read = #12400 1'b1;
	start_read = #7142 1'b0;
	start_read = #248 1'b1;
	# 1533;
	repeat(2)
	begin
		start_read = 1'b0;
		start_read = #1800 1'b1;
		# 1533;
	end
	start_read = 1'b0;
	start_read = #3203 1'b1;
	# 1366;
	repeat(2)
	begin
		start_read = 1'b0;
		start_read = #1967 1'b1;
		# 1366;
	end
	start_read = 1'b0;
	start_read = #318 1'b1;
	start_read = #4598 1'b0;
	start_read = #8400 1'b1;
end 

// timer_finish
initial
begin
	timer_finish = 1'b1;
	# 3337;
	repeat(2)
	begin
		timer_finish = 1'b0;
		timer_finish = #2867 1'b1;
		# 3799;
	end
	timer_finish = 1'b0;
	timer_finish = #2867 1'b1;
	timer_finish = #3147 1'b0;
	timer_finish = #3333 1'b1;
	timer_finish = #3333 1'b0;
	timer_finish = #3333 1'b1;
	timer_finish = #3333 1'b0;
	timer_finish = #3333 1'b1;
	timer_finish = #914 1'b0;
	timer_finish = #3467 1'b1;
	timer_finish = #3199 1'b0;
	timer_finish = #3467 1'b1;
	timer_finish = #3199 1'b0;
	timer_finish = #3467 1'b1;
	timer_finish = #4466 1'b0;
	timer_finish = #12400 1'b1;
	timer_finish = #6073 1'b0;
	timer_finish = #3543 1'b1;
	timer_finish = #8400 1'b0;
	timer_finish = #8057 1'b1;
	timer_finish = #4126 1'b0;
	timer_finish = #10000 1'b1;
	timer_finish = #7102 1'b0;
	timer_finish = #4467 1'b1;
	timer_finish = #2199 1'b0;
	timer_finish = #4467 1'b1;
	timer_finish = #2199 1'b0;
	timer_finish = #4467 1'b1;
	timer_finish = #1117 1'b0;
	timer_finish = #1700 1'b1;
	timer_finish = #1633 1'b0;
	timer_finish = #1700 1'b1;
	timer_finish = #1633 1'b0;
	timer_finish = #1700 1'b1;
	timer_finish = #2358 1'b0;
	timer_finish = #3300 1'b1;
	timer_finish = #1700 1'b0;
	timer_finish = #3300 1'b1;
	timer_finish = #832 1'b0;
	timer_finish = #2666 1'b1;
	timer_finish = #4600 1'b0;
	timer_finish = #6831 1'b1;
	timer_finish = #9400 1'b0;
	timer_finish = #6503 1'b1;
	timer_finish = #4530 1'b0;
	timer_finish = #8200 1'b1;
	timer_finish = #11787 1'b0;
	timer_finish = #5100 1'b1;
	timer_finish = #4900 1'b0;
	timer_finish = #5100 1'b1;
	timer_finish = #2947 1'b0;
	timer_finish = #5800 1'b1;
	timer_finish = #4044 1'b0;
	timer_finish = #5300 1'b1;
	timer_finish = #6831 1'b0;
	timer_finish = #10800 1'b1;
	timer_finish = #6168 1'b0;
	timer_finish = #1767 1'b1;
	timer_finish = #1566 1'b0;
	timer_finish = #1767 1'b1;
	timer_finish = #1566 1'b0;
	timer_finish = #1767 1'b1;
	timer_finish = #60 1'b0;
	timer_finish = #1040 1'b1;
	timer_finish = #10800 1'b0;
	timer_finish = #8845 1'b1;
	# 1466;
	repeat(2)
	begin
		timer_finish = 1'b0;
		timer_finish = #1867 1'b1;
		# 1466;
	end
	timer_finish = 1'b0;
	timer_finish = #6481 1'b1;
	timer_finish = #3500 1'b0;
	timer_finish = #6500 1'b1;
	timer_finish = #3500 1'b0;
	timer_finish = #1202 1'b1;
	timer_finish = #6154 1'b0;
	timer_finish = #11600 1'b1;
	timer_finish = #2246 1'b0;
	timer_finish = #1356 1'b1;
	timer_finish = #7400 1'b0;
	timer_finish = #11886 1'b1;
	timer_finish = #2800 1'b0;
	timer_finish = #2200 1'b1;
	timer_finish = #2800 1'b0;
	timer_finish = #1558 1'b1;
	# 1405;
	repeat(2)
	begin
		timer_finish = 1'b0;
		timer_finish = #3467 1'b1;
		# 3199;
	end
	timer_finish = 1'b0;
	timer_finish = #3467 1'b1;
	timer_finish = #1796 1'b0;
	timer_finish = #79 1'b1;
	timer_finish = #3400 1'b0;
	timer_finish = #8146 1'b1;
	timer_finish = #4900 1'b0;
	timer_finish = #5100 1'b1;
	timer_finish = #4900 1'b0;
	timer_finish = #6739 1'b1;
	timer_finish = #3000 1'b0;
	timer_finish = #7000 1'b1;
	timer_finish = #3000 1'b0;
	timer_finish = #3736 1'b1;
	# 91;
	repeat(2)
	begin
		timer_finish = 1'b0;
		timer_finish = #1667 1'b1;
		# 1666;
	end
	timer_finish = 1'b0;
	timer_finish = #1667 1'b1;
	timer_finish = #1576 1'b0;
	timer_finish = #725 1'b1;
	# 1166;
	repeat(2)
	begin
		timer_finish = 1'b0;
		timer_finish = #2167 1'b1;
		# 1166;
	end
	timer_finish = 1'b0;
	timer_finish = #2435 1'b1;
	timer_finish = #2400 1'b0;
	timer_finish = #2600 1'b1;
	timer_finish = #2400 1'b0;
	timer_finish = #1886 1'b1;
	# 1733;
	repeat(2)
	begin
		timer_finish = 1'b0;
		timer_finish = #1600 1'b1;
		# 1733;
	end
	timer_finish = 1'b0;
	timer_finish = #1323 1'b1;
	timer_finish = #2911 1'b0;
	timer_finish = #10800 1'b1;
	timer_finish = #13848 1'b0;
	timer_finish = #11400 1'b1;
	timer_finish = #3082 1'b0;
	timer_finish = #2550 1'b1;
	timer_finish = #2450 1'b0;
	timer_finish = #2550 1'b1;
	timer_finish = #2158 1'b0;
	timer_finish = #2750 1'b1;
	timer_finish = #2250 1'b0;
	timer_finish = #2750 1'b1;
	timer_finish = #825 1'b0;
	timer_finish = #1334 1'b1;
	timer_finish = #1999 1'b0;
	timer_finish = #1334 1'b1;
	timer_finish = #1999 1'b0;
	timer_finish = #1334 1'b1;
	timer_finish = #1676 1'b0;
	timer_finish = #1241 1'b1;
	timer_finish = #3100 1'b0;
	timer_finish = #6900 1'b1;
	timer_finish = #3100 1'b0;
	timer_finish = #5659 1'b1;
	# 1687;
	repeat(2)
	begin
		timer_finish = 1'b0;
		timer_finish = #3933 1'b1;
		# 2733;
	end
	timer_finish = 1'b0;
	timer_finish = #3933 1'b1;
	timer_finish = #1048 1'b0;
	timer_finish = #153 1'b1;
	timer_finish = #1550 1'b0;
	timer_finish = #3450 1'b1;
	timer_finish = #1550 1'b0;
	timer_finish = #3298 1'b1;
	timer_finish = #3500 1'b0;
	timer_finish = #6541 1'b1;
	timer_finish = #9800 1'b0;
	timer_finish = #10158 1'b1;
	timer_finish = #1941 1'b0;
	timer_finish = #13600 1'b1;
	timer_finish = #4459 1'b0;
	timer_finish = #454 1'b1;
	# 1633;
	repeat(2)
	begin
		timer_finish = 1'b0;
		timer_finish = #1700 1'b1;
		# 1633;
	end
	timer_finish = 1'b0;
	timer_finish = #1247 1'b1;
	timer_finish = #3129 1'b0;
	timer_finish = #5500 1'b1;
	timer_finish = #2249 1'b0;
	timer_finish = #3733 1'b1;
	timer_finish = #2933 1'b0;
	timer_finish = #3733 1'b1;
	timer_finish = #2933 1'b0;
	timer_finish = #3733 1'b1;
	timer_finish = #2585 1'b0;
	timer_finish = #3000 1'b1;
	timer_finish = #2000 1'b0;
	timer_finish = #3000 1'b1;
	timer_finish = #1472 1'b0;
	timer_finish = #2399 1'b1;
	# 2933;
	repeat(2)
	begin
		timer_finish = 1'b0;
		timer_finish = #3733 1'b1;
		# 2933;
	end
	timer_finish = 1'b0;
	timer_finish = #2583 1'b1;
	# 2533;
	repeat(2)
	begin
		timer_finish = 1'b0;
		timer_finish = #4133 1'b1;
		# 2533;
	end
	timer_finish = 1'b0;
	timer_finish = #8923 1'b1;
	timer_finish = #3500 1'b0;
	timer_finish = #11704 1'b1;
	timer_finish = #8600 1'b0;
	timer_finish = #161 1'b1;
	timer_finish = #1076 1'b0;
	timer_finish = #2550 1'b1;
	timer_finish = #2450 1'b0;
	timer_finish = #2550 1'b1;
	timer_finish = #1374 1'b0;
	timer_finish = #5257 1'b1;
	timer_finish = #3600 1'b0;
	timer_finish = #6551 1'b1;
	timer_finish = #3800 1'b0;
	timer_finish = #6200 1'b1;
	timer_finish = #3800 1'b0;
	timer_finish = #2257 1'b1;
	timer_finish = #2100 1'b0;
	timer_finish = #2900 1'b1;
	timer_finish = #2100 1'b0;
	timer_finish = #3181 1'b1;
	# 2066;
	repeat(2)
	begin
		timer_finish = 1'b0;
		timer_finish = #4600 1'b1;
		# 2066;
	end
	timer_finish = 1'b0;
	timer_finish = #2856 1'b1;
	timer_finish = #1080 1'b0;
	timer_finish = #5600 1'b1;
	timer_finish = #4400 1'b0;
	timer_finish = #5600 1'b1;
	timer_finish = #3320 1'b0;
	timer_finish = #2362 1'b1;
	# 3266;
	repeat(2)
	begin
		timer_finish = 1'b0;
		timer_finish = #3400 1'b1;
		# 3266;
	end
	timer_finish = 1'b0;
	timer_finish = #1040 1'b1;
	# 1056;
	repeat(2)
	begin
		timer_finish = 1'b0;
		timer_finish = #3067 1'b1;
		# 3599;
	end
	timer_finish = 1'b0;
	timer_finish = #3067 1'b1;
	timer_finish = #2545 1'b0;
	timer_finish = #1067 1'b1;
	# 1233;
	repeat(2)
	begin
		timer_finish = 1'b0;
		timer_finish = #2100 1'b1;
		# 1233;
	end
	timer_finish = 1'b0;
	timer_finish = #3061 1'b1;
	# 3133;
	repeat(2)
	begin
		timer_finish = 1'b0;
		timer_finish = #3533 1'b1;
		# 3133;
	end
	timer_finish = 1'b0;
	timer_finish = #1508 1'b1;
	timer_finish = #5139 1'b0;
	timer_finish = #4400 1'b1;
	timer_finish = #5600 1'b0;
	timer_finish = #4400 1'b1;
	timer_finish = #461 1'b0;
	timer_finish = #1748 1'b1;
	# 2733;
	repeat(2)
	begin
		timer_finish = 1'b0;
		timer_finish = #3933 1'b1;
		# 2733;
	end
	timer_finish = 1'b0;
	timer_finish = #3051 1'b1;
	# 1399;
	repeat(2)
	begin
		timer_finish = 1'b0;
		timer_finish = #1934 1'b1;
		# 1399;
	end
	timer_finish = 1'b0;
	timer_finish = #1071 1'b1;
	timer_finish = #1109 1'b0;
	timer_finish = #5800 1'b1;
end 

ipod_fsm_vlg_sample_tst tb_sample (
	.addr_reset(addr_reset),
	.aud_clk_22khz(aud_clk_22khz),
	.clock(clock),
	.direction(direction),
	.end_address(end_address),
	.pause(pause),
	.pico_done(pico_done),
	.read_data(read_data),
	.reset(reset),
	.silent(silent),
	.start_address(start_address),
	.start_read(start_read),
	.timer_finish(timer_finish),
	.sampler_tx(sampler)
);

ipod_fsm_vlg_check_tst tb_out(
	.address(address),
	.aud_data_out(aud_data_out),
	.audio_finish(audio_finish),
	.byteenable(byteenable),
	.mem_read(mem_read),
	.pico_flag(pico_flag),
	.read_data_request(read_data_request),
	.state(state),
	.visual_start(visual_start),
	.sampler_rx(sampler)
);
endmodule

