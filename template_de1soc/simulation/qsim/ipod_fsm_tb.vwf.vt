// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/16/2020 10:29:36"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ipod_fsm
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ipod_fsm_vlg_sample_tst(
	addr_reset,
	aud_clk_22khz,
	clock,
	direction,
	end_address,
	pause,
	pico_done,
	read_data,
	reset,
	silent,
	start_address,
	start_read,
	timer_finish,
	sampler_tx
);
input  addr_reset;
input  aud_clk_22khz;
input  clock;
input  direction;
input [23:0] end_address;
input  pause;
input  pico_done;
input [31:0] read_data;
input  reset;
input  silent;
input [23:0] start_address;
input  start_read;
input  timer_finish;
output sampler_tx;

reg sample;
time current_time;
always @(addr_reset or aud_clk_22khz or clock or direction or end_address or pause or pico_done or read_data or reset or silent or start_address or start_read or timer_finish)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ipod_fsm_vlg_check_tst (
	address,
	aud_data_out,
	audio_finish,
	byteenable,
	mem_read,
	pico_flag,
	read_data_request,
	state,
	visual_start,
	sampler_rx
);
input [22:0] address;
input [7:0] aud_data_out;
input  audio_finish;
input [3:0] byteenable;
input  mem_read;
input  pico_flag;
input  read_data_request;
input [7:0] state;
input  visual_start;
input sampler_rx;

reg [22:0] address_expected;
reg [7:0] aud_data_out_expected;
reg  audio_finish_expected;
reg [3:0] byteenable_expected;
reg  mem_read_expected;
reg  pico_flag_expected;
reg  read_data_request_expected;
reg [7:0] state_expected;
reg  visual_start_expected;

reg [22:0] address_prev;
reg [7:0] aud_data_out_prev;
reg  audio_finish_prev;
reg [3:0] byteenable_prev;
reg  mem_read_prev;
reg  pico_flag_prev;
reg  read_data_request_prev;
reg [7:0] state_prev;
reg  visual_start_prev;

reg [22:0] address_expected_prev;
reg [7:0] aud_data_out_expected_prev;
reg  audio_finish_expected_prev;
reg [3:0] byteenable_expected_prev;
reg  mem_read_expected_prev;
reg  pico_flag_expected_prev;
reg  read_data_request_expected_prev;
reg [7:0] state_expected_prev;
reg  visual_start_expected_prev;

reg [22:0] last_address_exp;
reg [7:0] last_aud_data_out_exp;
reg  last_audio_finish_exp;
reg [3:0] last_byteenable_exp;
reg  last_mem_read_exp;
reg  last_pico_flag_exp;
reg  last_read_data_request_exp;
reg [7:0] last_state_exp;
reg  last_visual_start_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:9] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 9'b1;
end

// update real /o prevs

always @(trigger)
begin
	address_prev = address;
	aud_data_out_prev = aud_data_out;
	audio_finish_prev = audio_finish;
	byteenable_prev = byteenable;
	mem_read_prev = mem_read;
	pico_flag_prev = pico_flag;
	read_data_request_prev = read_data_request;
	state_prev = state;
	visual_start_prev = visual_start;
end

// update expected /o prevs

always @(trigger)
begin
	address_expected_prev = address_expected;
	aud_data_out_expected_prev = aud_data_out_expected;
	audio_finish_expected_prev = audio_finish_expected;
	byteenable_expected_prev = byteenable_expected;
	mem_read_expected_prev = mem_read_expected;
	pico_flag_expected_prev = pico_flag_expected;
	read_data_request_expected_prev = read_data_request_expected;
	state_expected_prev = state_expected;
	visual_start_expected_prev = visual_start_expected;
end


// expected address[ 22 ]
initial
begin
	address_expected[22] = 1'bX;
	address_expected[22] = #439000 1'b0;
end 
// expected address[ 21 ]
initial
begin
	address_expected[21] = 1'bX;
	address_expected[21] = #439000 1'b0;
end 
// expected address[ 20 ]
initial
begin
	address_expected[20] = 1'bX;
	address_expected[20] = #439000 1'b0;
end 
// expected address[ 19 ]
initial
begin
	address_expected[19] = 1'bX;
	address_expected[19] = #439000 1'b0;
end 
// expected address[ 18 ]
initial
begin
	address_expected[18] = 1'bX;
	address_expected[18] = #439000 1'b0;
end 
// expected address[ 17 ]
initial
begin
	address_expected[17] = 1'bX;
	address_expected[17] = #439000 1'b0;
end 
// expected address[ 16 ]
initial
begin
	address_expected[16] = 1'bX;
	address_expected[16] = #439000 1'b0;
end 
// expected address[ 15 ]
initial
begin
	address_expected[15] = 1'bX;
	address_expected[15] = #439000 1'b0;
end 
// expected address[ 14 ]
initial
begin
	address_expected[14] = 1'bX;
	address_expected[14] = #439000 1'b0;
end 
// expected address[ 13 ]
initial
begin
	address_expected[13] = 1'bX;
	address_expected[13] = #439000 1'b0;
end 
// expected address[ 12 ]
initial
begin
	address_expected[12] = 1'bX;
	address_expected[12] = #439000 1'b0;
end 
// expected address[ 11 ]
initial
begin
	address_expected[11] = 1'bX;
	address_expected[11] = #439000 1'b0;
end 
// expected address[ 10 ]
initial
begin
	address_expected[10] = 1'bX;
	address_expected[10] = #439000 1'b0;
end 
// expected address[ 9 ]
initial
begin
	address_expected[9] = 1'bX;
	address_expected[9] = #439000 1'b0;
end 
// expected address[ 8 ]
initial
begin
	address_expected[8] = 1'bX;
	address_expected[8] = #439000 1'b0;
end 
// expected address[ 7 ]
initial
begin
	address_expected[7] = 1'bX;
	address_expected[7] = #439000 1'b0;
end 
// expected address[ 6 ]
initial
begin
	address_expected[6] = 1'bX;
	address_expected[6] = #439000 1'b0;
end 
// expected address[ 5 ]
initial
begin
	address_expected[5] = 1'bX;
	address_expected[5] = #439000 1'b0;
end 
// expected address[ 4 ]
initial
begin
	address_expected[4] = 1'bX;
	address_expected[4] = #439000 1'b0;
end 
// expected address[ 3 ]
initial
begin
	address_expected[3] = 1'bX;
	address_expected[3] = #439000 1'b0;
end 
// expected address[ 2 ]
initial
begin
	address_expected[2] = 1'bX;
	address_expected[2] = #439000 1'b0;
end 
// expected address[ 1 ]
initial
begin
	address_expected[1] = 1'bX;
	address_expected[1] = #439000 1'b0;
end 
// expected address[ 0 ]
initial
begin
	address_expected[0] = 1'bX;
	address_expected[0] = #439000 1'b0;
end 
// expected aud_data_out[ 7 ]
initial
begin
	aud_data_out_expected[7] = 1'bX;
	aud_data_out_expected[7] = #439000 1'b0;
end 
// expected aud_data_out[ 6 ]
initial
begin
	aud_data_out_expected[6] = 1'bX;
	aud_data_out_expected[6] = #439000 1'b0;
end 
// expected aud_data_out[ 5 ]
initial
begin
	aud_data_out_expected[5] = 1'bX;
	aud_data_out_expected[5] = #439000 1'b0;
end 
// expected aud_data_out[ 4 ]
initial
begin
	aud_data_out_expected[4] = 1'bX;
	aud_data_out_expected[4] = #439000 1'b0;
end 
// expected aud_data_out[ 3 ]
initial
begin
	aud_data_out_expected[3] = 1'bX;
	aud_data_out_expected[3] = #439000 1'b0;
end 
// expected aud_data_out[ 2 ]
initial
begin
	aud_data_out_expected[2] = 1'bX;
	aud_data_out_expected[2] = #439000 1'b0;
end 
// expected aud_data_out[ 1 ]
initial
begin
	aud_data_out_expected[1] = 1'bX;
	aud_data_out_expected[1] = #439000 1'b0;
end 
// expected aud_data_out[ 0 ]
initial
begin
	aud_data_out_expected[0] = 1'bX;
	aud_data_out_expected[0] = #439000 1'b0;
end 

// expected audio_finish
initial
begin
	audio_finish_expected = 1'bX;
	audio_finish_expected = #439000 1'b0;
end 
// expected byteenable[ 3 ]
initial
begin
	byteenable_expected[3] = 1'bX;
	byteenable_expected[3] = #439000 1'b0;
end 
// expected byteenable[ 2 ]
initial
begin
	byteenable_expected[2] = 1'bX;
	byteenable_expected[2] = #439000 1'b0;
end 
// expected byteenable[ 1 ]
initial
begin
	byteenable_expected[1] = 1'bX;
	byteenable_expected[1] = #439000 1'b0;
end 
// expected byteenable[ 0 ]
initial
begin
	byteenable_expected[0] = 1'bX;
	byteenable_expected[0] = #439000 1'b0;
end 

// expected mem_read
initial
begin
	mem_read_expected = 1'bX;
	mem_read_expected = #439000 1'b0;
end 

// expected pico_flag
initial
begin
	pico_flag_expected = 1'bX;
	pico_flag_expected = #439000 1'b0;
end 

// expected read_data_request
initial
begin
	read_data_request_expected = 1'bX;
	read_data_request_expected = #439000 1'b0;
end 
// expected state[ 7 ]
initial
begin
	state_expected[7] = 1'bX;
	state_expected[7] = #439000 1'b0;
end 
// expected state[ 6 ]
initial
begin
	state_expected[6] = 1'bX;
	state_expected[6] = #439000 1'b0;
end 
// expected state[ 5 ]
initial
begin
	state_expected[5] = 1'bX;
	state_expected[5] = #439000 1'b0;
end 
// expected state[ 4 ]
initial
begin
	state_expected[4] = 1'bX;
	state_expected[4] = #439000 1'b0;
end 
// expected state[ 3 ]
initial
begin
	state_expected[3] = 1'bX;
	state_expected[3] = #439000 1'b0;
end 
// expected state[ 2 ]
initial
begin
	state_expected[2] = 1'bX;
	state_expected[2] = #439000 1'b0;
end 
// expected state[ 1 ]
initial
begin
	state_expected[1] = 1'bX;
	state_expected[1] = #439000 1'b0;
end 
// expected state[ 0 ]
initial
begin
	state_expected[0] = 1'bX;
	state_expected[0] = #439000 1'b0;
end 

// expected visual_start
initial
begin
	visual_start_expected = 1'bX;
	visual_start_expected = #439000 1'b0;
end 
// generate trigger
always @(address_expected or address or aud_data_out_expected or aud_data_out or audio_finish_expected or audio_finish or byteenable_expected or byteenable or mem_read_expected or mem_read or pico_flag_expected or pico_flag or read_data_request_expected or read_data_request or state_expected or state or visual_start_expected or visual_start)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected address = %b | expected aud_data_out = %b | expected audio_finish = %b | expected byteenable = %b | expected mem_read = %b | expected pico_flag = %b | expected read_data_request = %b | expected state = %b | expected visual_start = %b | ",address_expected_prev,aud_data_out_expected_prev,audio_finish_expected_prev,byteenable_expected_prev,mem_read_expected_prev,pico_flag_expected_prev,read_data_request_expected_prev,state_expected_prev,visual_start_expected_prev);
	$display("| real address = %b | real aud_data_out = %b | real audio_finish = %b | real byteenable = %b | real mem_read = %b | real pico_flag = %b | real read_data_request = %b | real state = %b | real visual_start = %b | ",address_prev,aud_data_out_prev,audio_finish_prev,byteenable_prev,mem_read_prev,pico_flag_prev,read_data_request_prev,state_prev,visual_start_prev);
`endif
	if (
		( address_expected_prev[0] !== 1'bx ) && ( address_prev[0] !== address_expected_prev[0] )
		&& ((address_expected_prev[0] !== last_address_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[0] = address_expected_prev[0];
	end
	if (
		( address_expected_prev[1] !== 1'bx ) && ( address_prev[1] !== address_expected_prev[1] )
		&& ((address_expected_prev[1] !== last_address_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[1] = address_expected_prev[1];
	end
	if (
		( address_expected_prev[2] !== 1'bx ) && ( address_prev[2] !== address_expected_prev[2] )
		&& ((address_expected_prev[2] !== last_address_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[2] = address_expected_prev[2];
	end
	if (
		( address_expected_prev[3] !== 1'bx ) && ( address_prev[3] !== address_expected_prev[3] )
		&& ((address_expected_prev[3] !== last_address_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[3] = address_expected_prev[3];
	end
	if (
		( address_expected_prev[4] !== 1'bx ) && ( address_prev[4] !== address_expected_prev[4] )
		&& ((address_expected_prev[4] !== last_address_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[4] = address_expected_prev[4];
	end
	if (
		( address_expected_prev[5] !== 1'bx ) && ( address_prev[5] !== address_expected_prev[5] )
		&& ((address_expected_prev[5] !== last_address_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[5] = address_expected_prev[5];
	end
	if (
		( address_expected_prev[6] !== 1'bx ) && ( address_prev[6] !== address_expected_prev[6] )
		&& ((address_expected_prev[6] !== last_address_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[6] = address_expected_prev[6];
	end
	if (
		( address_expected_prev[7] !== 1'bx ) && ( address_prev[7] !== address_expected_prev[7] )
		&& ((address_expected_prev[7] !== last_address_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[7] = address_expected_prev[7];
	end
	if (
		( address_expected_prev[8] !== 1'bx ) && ( address_prev[8] !== address_expected_prev[8] )
		&& ((address_expected_prev[8] !== last_address_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[8] = address_expected_prev[8];
	end
	if (
		( address_expected_prev[9] !== 1'bx ) && ( address_prev[9] !== address_expected_prev[9] )
		&& ((address_expected_prev[9] !== last_address_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[9] = address_expected_prev[9];
	end
	if (
		( address_expected_prev[10] !== 1'bx ) && ( address_prev[10] !== address_expected_prev[10] )
		&& ((address_expected_prev[10] !== last_address_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[10] = address_expected_prev[10];
	end
	if (
		( address_expected_prev[11] !== 1'bx ) && ( address_prev[11] !== address_expected_prev[11] )
		&& ((address_expected_prev[11] !== last_address_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[11] = address_expected_prev[11];
	end
	if (
		( address_expected_prev[12] !== 1'bx ) && ( address_prev[12] !== address_expected_prev[12] )
		&& ((address_expected_prev[12] !== last_address_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[12] = address_expected_prev[12];
	end
	if (
		( address_expected_prev[13] !== 1'bx ) && ( address_prev[13] !== address_expected_prev[13] )
		&& ((address_expected_prev[13] !== last_address_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[13] = address_expected_prev[13];
	end
	if (
		( address_expected_prev[14] !== 1'bx ) && ( address_prev[14] !== address_expected_prev[14] )
		&& ((address_expected_prev[14] !== last_address_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[14] = address_expected_prev[14];
	end
	if (
		( address_expected_prev[15] !== 1'bx ) && ( address_prev[15] !== address_expected_prev[15] )
		&& ((address_expected_prev[15] !== last_address_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[15] = address_expected_prev[15];
	end
	if (
		( address_expected_prev[16] !== 1'bx ) && ( address_prev[16] !== address_expected_prev[16] )
		&& ((address_expected_prev[16] !== last_address_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[16] = address_expected_prev[16];
	end
	if (
		( address_expected_prev[17] !== 1'bx ) && ( address_prev[17] !== address_expected_prev[17] )
		&& ((address_expected_prev[17] !== last_address_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[17] = address_expected_prev[17];
	end
	if (
		( address_expected_prev[18] !== 1'bx ) && ( address_prev[18] !== address_expected_prev[18] )
		&& ((address_expected_prev[18] !== last_address_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[18] = address_expected_prev[18];
	end
	if (
		( address_expected_prev[19] !== 1'bx ) && ( address_prev[19] !== address_expected_prev[19] )
		&& ((address_expected_prev[19] !== last_address_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[19] = address_expected_prev[19];
	end
	if (
		( address_expected_prev[20] !== 1'bx ) && ( address_prev[20] !== address_expected_prev[20] )
		&& ((address_expected_prev[20] !== last_address_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[20] = address_expected_prev[20];
	end
	if (
		( address_expected_prev[21] !== 1'bx ) && ( address_prev[21] !== address_expected_prev[21] )
		&& ((address_expected_prev[21] !== last_address_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[21] = address_expected_prev[21];
	end
	if (
		( address_expected_prev[22] !== 1'bx ) && ( address_prev[22] !== address_expected_prev[22] )
		&& ((address_expected_prev[22] !== last_address_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[22] = address_expected_prev[22];
	end
	if (
		( aud_data_out_expected_prev[0] !== 1'bx ) && ( aud_data_out_prev[0] !== aud_data_out_expected_prev[0] )
		&& ((aud_data_out_expected_prev[0] !== last_aud_data_out_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aud_data_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aud_data_out_expected_prev);
		$display ("     Real value = %b", aud_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aud_data_out_exp[0] = aud_data_out_expected_prev[0];
	end
	if (
		( aud_data_out_expected_prev[1] !== 1'bx ) && ( aud_data_out_prev[1] !== aud_data_out_expected_prev[1] )
		&& ((aud_data_out_expected_prev[1] !== last_aud_data_out_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aud_data_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aud_data_out_expected_prev);
		$display ("     Real value = %b", aud_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aud_data_out_exp[1] = aud_data_out_expected_prev[1];
	end
	if (
		( aud_data_out_expected_prev[2] !== 1'bx ) && ( aud_data_out_prev[2] !== aud_data_out_expected_prev[2] )
		&& ((aud_data_out_expected_prev[2] !== last_aud_data_out_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aud_data_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aud_data_out_expected_prev);
		$display ("     Real value = %b", aud_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aud_data_out_exp[2] = aud_data_out_expected_prev[2];
	end
	if (
		( aud_data_out_expected_prev[3] !== 1'bx ) && ( aud_data_out_prev[3] !== aud_data_out_expected_prev[3] )
		&& ((aud_data_out_expected_prev[3] !== last_aud_data_out_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aud_data_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aud_data_out_expected_prev);
		$display ("     Real value = %b", aud_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aud_data_out_exp[3] = aud_data_out_expected_prev[3];
	end
	if (
		( aud_data_out_expected_prev[4] !== 1'bx ) && ( aud_data_out_prev[4] !== aud_data_out_expected_prev[4] )
		&& ((aud_data_out_expected_prev[4] !== last_aud_data_out_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aud_data_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aud_data_out_expected_prev);
		$display ("     Real value = %b", aud_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aud_data_out_exp[4] = aud_data_out_expected_prev[4];
	end
	if (
		( aud_data_out_expected_prev[5] !== 1'bx ) && ( aud_data_out_prev[5] !== aud_data_out_expected_prev[5] )
		&& ((aud_data_out_expected_prev[5] !== last_aud_data_out_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aud_data_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aud_data_out_expected_prev);
		$display ("     Real value = %b", aud_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aud_data_out_exp[5] = aud_data_out_expected_prev[5];
	end
	if (
		( aud_data_out_expected_prev[6] !== 1'bx ) && ( aud_data_out_prev[6] !== aud_data_out_expected_prev[6] )
		&& ((aud_data_out_expected_prev[6] !== last_aud_data_out_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aud_data_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aud_data_out_expected_prev);
		$display ("     Real value = %b", aud_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aud_data_out_exp[6] = aud_data_out_expected_prev[6];
	end
	if (
		( aud_data_out_expected_prev[7] !== 1'bx ) && ( aud_data_out_prev[7] !== aud_data_out_expected_prev[7] )
		&& ((aud_data_out_expected_prev[7] !== last_aud_data_out_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aud_data_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aud_data_out_expected_prev);
		$display ("     Real value = %b", aud_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aud_data_out_exp[7] = aud_data_out_expected_prev[7];
	end
	if (
		( audio_finish_expected_prev !== 1'bx ) && ( audio_finish_prev !== audio_finish_expected_prev )
		&& ((audio_finish_expected_prev !== last_audio_finish_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port audio_finish :: @time = %t",  $realtime);
		$display ("     Expected value = %b", audio_finish_expected_prev);
		$display ("     Real value = %b", audio_finish_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_audio_finish_exp = audio_finish_expected_prev;
	end
	if (
		( byteenable_expected_prev[0] !== 1'bx ) && ( byteenable_prev[0] !== byteenable_expected_prev[0] )
		&& ((byteenable_expected_prev[0] !== last_byteenable_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port byteenable[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", byteenable_expected_prev);
		$display ("     Real value = %b", byteenable_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_byteenable_exp[0] = byteenable_expected_prev[0];
	end
	if (
		( byteenable_expected_prev[1] !== 1'bx ) && ( byteenable_prev[1] !== byteenable_expected_prev[1] )
		&& ((byteenable_expected_prev[1] !== last_byteenable_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port byteenable[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", byteenable_expected_prev);
		$display ("     Real value = %b", byteenable_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_byteenable_exp[1] = byteenable_expected_prev[1];
	end
	if (
		( byteenable_expected_prev[2] !== 1'bx ) && ( byteenable_prev[2] !== byteenable_expected_prev[2] )
		&& ((byteenable_expected_prev[2] !== last_byteenable_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port byteenable[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", byteenable_expected_prev);
		$display ("     Real value = %b", byteenable_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_byteenable_exp[2] = byteenable_expected_prev[2];
	end
	if (
		( byteenable_expected_prev[3] !== 1'bx ) && ( byteenable_prev[3] !== byteenable_expected_prev[3] )
		&& ((byteenable_expected_prev[3] !== last_byteenable_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port byteenable[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", byteenable_expected_prev);
		$display ("     Real value = %b", byteenable_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_byteenable_exp[3] = byteenable_expected_prev[3];
	end
	if (
		( mem_read_expected_prev !== 1'bx ) && ( mem_read_prev !== mem_read_expected_prev )
		&& ((mem_read_expected_prev !== last_mem_read_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_read :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_read_expected_prev);
		$display ("     Real value = %b", mem_read_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_mem_read_exp = mem_read_expected_prev;
	end
	if (
		( pico_flag_expected_prev !== 1'bx ) && ( pico_flag_prev !== pico_flag_expected_prev )
		&& ((pico_flag_expected_prev !== last_pico_flag_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pico_flag :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pico_flag_expected_prev);
		$display ("     Real value = %b", pico_flag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pico_flag_exp = pico_flag_expected_prev;
	end
	if (
		( read_data_request_expected_prev !== 1'bx ) && ( read_data_request_prev !== read_data_request_expected_prev )
		&& ((read_data_request_expected_prev !== last_read_data_request_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_request :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_request_expected_prev);
		$display ("     Real value = %b", read_data_request_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_read_data_request_exp = read_data_request_expected_prev;
	end
	if (
		( state_expected_prev[0] !== 1'bx ) && ( state_prev[0] !== state_expected_prev[0] )
		&& ((state_expected_prev[0] !== last_state_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_state_exp[0] = state_expected_prev[0];
	end
	if (
		( state_expected_prev[1] !== 1'bx ) && ( state_prev[1] !== state_expected_prev[1] )
		&& ((state_expected_prev[1] !== last_state_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_state_exp[1] = state_expected_prev[1];
	end
	if (
		( state_expected_prev[2] !== 1'bx ) && ( state_prev[2] !== state_expected_prev[2] )
		&& ((state_expected_prev[2] !== last_state_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_state_exp[2] = state_expected_prev[2];
	end
	if (
		( state_expected_prev[3] !== 1'bx ) && ( state_prev[3] !== state_expected_prev[3] )
		&& ((state_expected_prev[3] !== last_state_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_state_exp[3] = state_expected_prev[3];
	end
	if (
		( state_expected_prev[4] !== 1'bx ) && ( state_prev[4] !== state_expected_prev[4] )
		&& ((state_expected_prev[4] !== last_state_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_state_exp[4] = state_expected_prev[4];
	end
	if (
		( state_expected_prev[5] !== 1'bx ) && ( state_prev[5] !== state_expected_prev[5] )
		&& ((state_expected_prev[5] !== last_state_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_state_exp[5] = state_expected_prev[5];
	end
	if (
		( state_expected_prev[6] !== 1'bx ) && ( state_prev[6] !== state_expected_prev[6] )
		&& ((state_expected_prev[6] !== last_state_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_state_exp[6] = state_expected_prev[6];
	end
	if (
		( state_expected_prev[7] !== 1'bx ) && ( state_prev[7] !== state_expected_prev[7] )
		&& ((state_expected_prev[7] !== last_state_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_state_exp[7] = state_expected_prev[7];
	end
	if (
		( visual_start_expected_prev !== 1'bx ) && ( visual_start_prev !== visual_start_expected_prev )
		&& ((visual_start_expected_prev !== last_visual_start_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port visual_start :: @time = %t",  $realtime);
		$display ("     Expected value = %b", visual_start_expected_prev);
		$display ("     Real value = %b", visual_start_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_visual_start_exp = visual_start_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ipod_fsm_vlg_vec_tst();
// constants                                           
// general purpose registers
reg addr_reset;
reg aud_clk_22khz;
reg clock;
reg direction;
reg [23:0] end_address;
reg pause;
reg pico_done;
reg [31:0] read_data;
reg reset;
reg silent;
reg [23:0] start_address;
reg start_read;
reg timer_finish;
// wires                                               
wire [22:0] address;
wire [7:0] aud_data_out;
wire audio_finish;
wire [3:0] byteenable;
wire mem_read;
wire pico_flag;
wire read_data_request;
wire [7:0] state;
wire visual_start;

wire sampler;                             

// assign statements (if any)                          
ipod_fsm i1 (
// port map - connection between master ports and signals/registers   
	.addr_reset(addr_reset),
	.address(address),
	.aud_clk_22khz(aud_clk_22khz),
	.aud_data_out(aud_data_out),
	.audio_finish(audio_finish),
	.byteenable(byteenable),
	.clock(clock),
	.direction(direction),
	.end_address(end_address),
	.mem_read(mem_read),
	.pause(pause),
	.pico_done(pico_done),
	.pico_flag(pico_flag),
	.read_data(read_data),
	.read_data_request(read_data_request),
	.reset(reset),
	.silent(silent),
	.start_address(start_address),
	.start_read(start_read),
	.state(state),
	.timer_finish(timer_finish),
	.visual_start(visual_start)
);

// addr_reset
initial
begin
	addr_reset = 1'b0;
end 

// aud_clk_22khz
initial
begin
	repeat(2173)
	begin
		aud_clk_22khz = 1'b0;
		aud_clk_22khz = #230 1'b1;
		# 230;
	end
	aud_clk_22khz = 1'b0;
	aud_clk_22khz = #230 1'b1;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #100 1'b1;
	#100;
end 

// direction
initial
begin
	direction = 1'b0;
end 
// end_address[ 23 ]
initial
begin
	end_address[23] = 1'b0;
end 
// end_address[ 22 ]
initial
begin
	end_address[22] = 1'b0;
end 
// end_address[ 21 ]
initial
begin
	end_address[21] = 1'b0;
end 
// end_address[ 20 ]
initial
begin
	end_address[20] = 1'b0;
end 
// end_address[ 19 ]
initial
begin
	end_address[19] = 1'b0;
end 
// end_address[ 18 ]
initial
begin
	end_address[18] = 1'b0;
end 
// end_address[ 17 ]
initial
begin
	end_address[17] = 1'b0;
end 
// end_address[ 16 ]
initial
begin
	end_address[16] = 1'b0;
end 
// end_address[ 15 ]
initial
begin
	end_address[15] = 1'b0;
end 
// end_address[ 14 ]
initial
begin
	end_address[14] = 1'b0;
end 
// end_address[ 13 ]
initial
begin
	end_address[13] = 1'b0;
end 
// end_address[ 12 ]
initial
begin
	end_address[12] = 1'b0;
end 
// end_address[ 11 ]
initial
begin
	end_address[11] = 1'b0;
end 
// end_address[ 10 ]
initial
begin
	end_address[10] = 1'b0;
end 
// end_address[ 9 ]
initial
begin
	end_address[9] = 1'b0;
end 
// end_address[ 8 ]
initial
begin
	end_address[8] = 1'b0;
end 
// end_address[ 7 ]
initial
begin
	end_address[7] = 1'b0;
	end_address[7] = #500000 1'b1;
end 
// end_address[ 6 ]
initial
begin
	end_address[6] = 1'b0;
end 
// end_address[ 5 ]
initial
begin
	end_address[5] = 1'b1;
	end_address[5] = #500000 1'b0;
end 
// end_address[ 4 ]
initial
begin
	end_address[4] = 1'b1;
	end_address[4] = #500000 1'b0;
end 
// end_address[ 3 ]
initial
begin
	end_address[3] = 1'b0;
	end_address[3] = #500000 1'b1;
end 
// end_address[ 2 ]
initial
begin
	end_address[2] = 1'b0;
	end_address[2] = #500000 1'b1;
end 
// end_address[ 1 ]
initial
begin
	end_address[1] = 1'b1;
	end_address[1] = #500000 1'b0;
end 
// end_address[ 0 ]
initial
begin
	end_address[0] = 1'b0;
end 

// pause
initial
begin
	pause = 1'b0;
	pause = #50000 1'b1;
	pause = #30000 1'b0;
end 

// pico_done
initial
begin
	pico_done = 1'b1;
	pico_done = #1989 1'b0;
	pico_done = #6700 1'b1;
	pico_done = #3300 1'b0;
	pico_done = #6700 1'b1;
	pico_done = #1311 1'b0;
	pico_done = #981 1'b1;
	# 3532;
	repeat(2)
	begin
		pico_done = 1'b0;
		pico_done = #3134 1'b1;
		# 3532;
	end
	pico_done = 1'b0;
	pico_done = #2155 1'b1;
	pico_done = #4228 1'b0;
	pico_done = #13400 1'b1;
	pico_done = #6168 1'b0;
	pico_done = #5800 1'b1;
	pico_done = #4200 1'b0;
	pico_done = #5800 1'b1;
	pico_done = #10051 1'b0;
	pico_done = #8200 1'b1;
	pico_done = #5728 1'b0;
	pico_done = #4500 1'b1;
	pico_done = #1925 1'b0;
	pico_done = #636 1'b1;
	pico_done = #1700 1'b0;
	pico_done = #3300 1'b1;
	pico_done = #1700 1'b0;
	pico_done = #2664 1'b1;
	# 1485;
	repeat(2)
	begin
		pico_done = 1'b0;
		pico_done = #3200 1'b1;
		# 3466;
	end
	pico_done = 1'b0;
	pico_done = #3200 1'b1;
	pico_done = #4855 1'b0;
	pico_done = #13600 1'b1;
	pico_done = #3528 1'b0;
	pico_done = #2607 1'b1;
	pico_done = #1650 1'b0;
	pico_done = #3350 1'b1;
	pico_done = #1650 1'b0;
	pico_done = #3048 1'b1;
	pico_done = #5400 1'b0;
	pico_done = #4600 1'b1;
	pico_done = #5400 1'b0;
	pico_done = #4189 1'b1;
	pico_done = #9400 1'b0;
	pico_done = #8706 1'b1;
	pico_done = #5817 1'b0;
	pico_done = #11600 1'b1;
	pico_done = #2583 1'b0;
	pico_done = #483 1'b1;
	# 1066;
	repeat(2)
	begin
		pico_done = 1'b0;
		pico_done = #2267 1'b1;
		# 1066;
	end
	pico_done = 1'b0;
	pico_done = #3449 1'b1;
	pico_done = #2950 1'b0;
	pico_done = #2050 1'b1;
	pico_done = #2950 1'b0;
	pico_done = #979 1'b1;
	pico_done = #4600 1'b0;
	pico_done = #5400 1'b1;
	pico_done = #4600 1'b0;
	pico_done = #7921 1'b1;
	pico_done = #1650 1'b0;
	pico_done = #3350 1'b1;
	pico_done = #1650 1'b0;
	pico_done = #2442 1'b1;
	# 3199;
	repeat(2)
	begin
		pico_done = 1'b0;
		pico_done = #3467 1'b1;
		# 3199;
	end
	pico_done = 1'b0;
	pico_done = #5249 1'b1;
	# 1999;
	repeat(2)
	begin
		pico_done = 1'b0;
		pico_done = #4667 1'b1;
		# 1999;
	end
	pico_done = 1'b0;
	pico_done = #683 1'b1;
	# 2147;
	repeat(2)
	begin
		pico_done = 1'b0;
		pico_done = #4467 1'b1;
		# 2199;
	end
	pico_done = 1'b0;
	pico_done = #4467 1'b1;
	pico_done = #54 1'b0;
	pico_done = #1287 1'b1;
	# 1499;
	repeat(2)
	begin
		pico_done = 1'b0;
		pico_done = #1834 1'b1;
		# 1499;
	end
	pico_done = 1'b0;
	pico_done = #1060 1'b1;
	pico_done = #1550 1'b0;
	pico_done = #3450 1'b1;
	pico_done = #1550 1'b0;
	pico_done = #2938 1'b1;
	pico_done = #1315 1'b0;
	pico_done = #3500 1'b1;
	pico_done = #1500 1'b0;
	pico_done = #3500 1'b1;
	pico_done = #5182 1'b0;
	pico_done = #4600 1'b1;
	pico_done = #3102 1'b0;
	pico_done = #5500 1'b1;
	pico_done = #4500 1'b0;
	pico_done = #5500 1'b1;
	pico_done = #1801 1'b0;
	pico_done = #2323 1'b1;
	# 2466;
	repeat(2)
	begin
		pico_done = 1'b0;
		pico_done = #4200 1'b1;
		# 2466;
	end
	pico_done = 1'b0;
	pico_done = #1879 1'b1;
	pico_done = #1397 1'b0;
	pico_done = #2850 1'b1;
	pico_done = #2150 1'b0;
	pico_done = #2850 1'b1;
	pico_done = #753 1'b0;
	pico_done = #155 1'b1;
	# 1633;
	repeat(2)
	begin
		pico_done = 1'b0;
		pico_done = #1700 1'b1;
		# 1633;
	end
	pico_done = 1'b0;
	pico_done = #4298 1'b1;
	pico_done = #9000 1'b0;
	pico_done = #8248 1'b1;
	pico_done = #756 1'b0;
	pico_done = #6000 1'b1;
	pico_done = #4000 1'b0;
	pico_done = #6000 1'b1;
	pico_done = #7804 1'b0;
	pico_done = #4000 1'b1;
	pico_done = #1440 1'b0;
	pico_done = #3810 1'b1;
	pico_done = #4400 1'b0;
	pico_done = #5600 1'b1;
	pico_done = #4400 1'b0;
	pico_done = #1790 1'b1;
	pico_done = #2363 1'b0;
	pico_done = #4100 1'b1;
	pico_done = #5900 1'b0;
	pico_done = #4100 1'b1;
	pico_done = #3537 1'b0;
	pico_done = #1655 1'b1;
	# 1299;
	repeat(2)
	begin
		pico_done = 1'b0;
		pico_done = #2034 1'b1;
		# 1299;
	end
	pico_done = 1'b0;
	pico_done = #5601 1'b1;
	pico_done = #3400 1'b0;
	pico_done = #1379 1'b1;
	# 539;
	repeat(2)
	begin
		pico_done = 1'b0;
		pico_done = #3933 1'b1;
		# 2733;
	end
	pico_done = 1'b0;
	pico_done = #3933 1'b1;
	pico_done = #2322 1'b0;
	pico_done = #3333 1'b1;
	pico_done = #3333 1'b0;
	pico_done = #3333 1'b1;
	pico_done = #3333 1'b0;
	pico_done = #3333 1'b1;
	pico_done = #4650 1'b0;
	pico_done = #2800 1'b1;
	pico_done = #2200 1'b0;
	pico_done = #2800 1'b1;
	pico_done = #759 1'b0;
	pico_done = #223 1'b1;
	# 1366;
	repeat(2)
	begin
		pico_done = 1'b0;
		pico_done = #1967 1'b1;
		# 1366;
	end
	pico_done = 1'b0;
	pico_done = #1745 1'b1;
	pico_done = #1447 1'b0;
	pico_done = #3450 1'b1;
	pico_done = #1550 1'b0;
	pico_done = #3450 1'b1;
	pico_done = #103 1'b0;
	pico_done = #5765 1'b1;
	pico_done = #8800 1'b0;
	pico_done = #5435 1'b1;
	# 850;
	repeat(2)
	begin
		pico_done = 1'b0;
		pico_done = #2200 1'b1;
		# 1133;
	end
	pico_done = 1'b0;
	pico_done = #2200 1'b1;
	pico_done = #1639 1'b0;
	pico_done = #1867 1'b1;
	pico_done = #1466 1'b0;
	pico_done = #1867 1'b1;
	pico_done = #1466 1'b0;
	pico_done = #1867 1'b1;
	pico_done = #1986 1'b0;
	pico_done = #3867 1'b1;
	pico_done = #2799 1'b0;
	pico_done = #3867 1'b1;
	pico_done = #2799 1'b0;
	pico_done = #3867 1'b1;
	pico_done = #927 1'b0;
	pico_done = #1432 1'b1;
	pico_done = #2350 1'b0;
	pico_done = #2650 1'b1;
	pico_done = #2350 1'b0;
	pico_done = #1218 1'b1;
	pico_done = #2765 1'b0;
	pico_done = #6200 1'b1;
	pico_done = #3800 1'b0;
	pico_done = #6200 1'b1;
	pico_done = #1035 1'b0;
	pico_done = #561 1'b1;
	pico_done = #4200 1'b0;
	pico_done = #5800 1'b1;
	pico_done = #4200 1'b0;
	pico_done = #5733 1'b1;
	pico_done = #1800 1'b0;
	pico_done = #3200 1'b1;
	pico_done = #1800 1'b0;
	pico_done = #2706 1'b1;
	pico_done = #2464 1'b0;
	pico_done = #9800 1'b1;
	pico_done = #9787 1'b0;
	pico_done = #11600 1'b1;
	pico_done = #6349 1'b0;
	pico_done = #1721 1'b1;
	# 2799;
	repeat(2)
	begin
		pico_done = 1'b0;
		pico_done = #3867 1'b1;
		# 2799;
	end
	pico_done = 1'b0;
	pico_done = #2148 1'b1;
	pico_done = #1896 1'b0;
	pico_done = #6400 1'b1;
	pico_done = #2100 1'b0;
	pico_done = #2067 1'b1;
	pico_done = #1266 1'b0;
	pico_done = #2067 1'b1;
	pico_done = #1266 1'b0;
	pico_done = #2067 1'b1;
	pico_done = #871 1'b0;
	pico_done = #2629 1'b1;
	pico_done = #2250 1'b0;
	pico_done = #2750 1'b1;
	pico_done = #2250 1'b0;
	pico_done = #3042 1'b1;
	pico_done = #3100 1'b0;
	pico_done = #3979 1'b1;
	pico_done = #2605 1'b0;
	pico_done = #6700 1'b1;
	pico_done = #3300 1'b0;
	pico_done = #6700 1'b1;
	pico_done = #2269 1'b0;
	pico_done = #2750 1'b1;
	pico_done = #2250 1'b0;
	pico_done = #2750 1'b1;
	pico_done = #676 1'b0;
	pico_done = #1883 1'b1;
	pico_done = #9200 1'b0;
	pico_done = #8917 1'b1;
	pico_done = #8155 1'b0;
	pico_done = #10600 1'b1;
	pico_done = #1245 1'b0;
	pico_done = #3515 1'b1;
	pico_done = #4700 1'b0;
	pico_done = #2739 1'b1;
	# 1233;
	repeat(2)
	begin
		pico_done = 1'b0;
		pico_done = #2100 1'b1;
		# 1233;
	end
	pico_done = 1'b0;
	pico_done = #1147 1'b1;
	# 572;
	repeat(2)
	begin
		pico_done = 1'b0;
		pico_done = #1400 1'b1;
		# 1933;
	end
	pico_done = 1'b0;
	pico_done = #1400 1'b1;
	pico_done = #2099 1'b0;
	pico_done = #3050 1'b1;
	pico_done = #1950 1'b0;
	pico_done = #3050 1'b1;
	pico_done = #1213 1'b0;
	pico_done = #678 1'b1;
	# 1166;
	repeat(2)
	begin
		pico_done = 1'b0;
		pico_done = #2167 1'b1;
		# 1166;
	end
	pico_done = 1'b0;
	pico_done = #1490 1'b1;
	pico_done = #829 1'b0;
	pico_done = #6200 1'b1;
	pico_done = #3800 1'b0;
	pico_done = #6200 1'b1;
	pico_done = #4738 1'b0;
	pico_done = #2700 1'b1;
	pico_done = #2300 1'b0;
	pico_done = #2700 1'b1;
	pico_done = #2983 1'b0;
	pico_done = #6200 1'b1;
end 
// read_data[ 31 ]
initial
begin
	read_data[31] = 1'b0;
	read_data[31] = #400000 1'b1;
	read_data[31] = #200000 1'b0;
	read_data[31] = #100000 1'b1;
	read_data[31] = #100000 1'b0;
end 
// read_data[ 30 ]
initial
begin
	read_data[30] = 1'b0;
	read_data[30] = #100000 1'b1;
	read_data[30] = #300000 1'b0;
	read_data[30] = #300000 1'b1;
	read_data[30] = #100000 1'b0;
	read_data[30] = #100000 1'b1;
end 
// read_data[ 29 ]
initial
begin
	read_data[29] = 1'b1;
	read_data[29] = #100000 1'b0;
	read_data[29] = #100000 1'b1;
	read_data[29] = #300000 1'b0;
	read_data[29] = #400000 1'b1;
end 
// read_data[ 28 ]
initial
begin
	read_data[28] = 1'b1;
	read_data[28] = #200000 1'b0;
	read_data[28] = #100000 1'b1;
	read_data[28] = #400000 1'b0;
end 
// read_data[ 27 ]
initial
begin
	read_data[27] = 1'b1;
	read_data[27] = #600000 1'b0;
	read_data[27] = #100000 1'b1;
end 
// read_data[ 26 ]
initial
begin
	read_data[26] = 1'b0;
	read_data[26] = #100000 1'b1;
	read_data[26] = #100000 1'b0;
	read_data[26] = #100000 1'b1;
	read_data[26] = #500000 1'b0;
	read_data[26] = #100000 1'b1;
end 
// read_data[ 25 ]
initial
begin
	read_data[25] = 1'b1;
	read_data[25] = #200000 1'b0;
	read_data[25] = #400000 1'b1;
	read_data[25] = #200000 1'b0;
	read_data[25] = #100000 1'b1;
end 
// read_data[ 24 ]
initial
begin
	read_data[24] = 1'b1;
	read_data[24] = #200000 1'b0;
	read_data[24] = #100000 1'b1;
	read_data[24] = #300000 1'b0;
	read_data[24] = #300000 1'b1;
end 
// read_data[ 23 ]
initial
begin
	read_data[23] = 1'b0;
	read_data[23] = #100000 1'b1;
	read_data[23] = #100000 1'b0;
	read_data[23] = #300000 1'b1;
	read_data[23] = #100000 1'b0;
end 
// read_data[ 22 ]
initial
begin
	read_data[22] = 1'b1;
	read_data[22] = #300000 1'b0;
	read_data[22] = #100000 1'b1;
	read_data[22] = #100000 1'b0;
end 
// read_data[ 21 ]
initial
begin
	read_data[21] = 1'b1;
	read_data[21] = #100000 1'b0;
	read_data[21] = #200000 1'b1;
	read_data[21] = #100000 1'b0;
	read_data[21] = #100000 1'b1;
	read_data[21] = #100000 1'b0;
	read_data[21] = #200000 1'b1;
end 
// read_data[ 20 ]
initial
begin
	read_data[20] = 1'b0;
	read_data[20] = #100000 1'b1;
	read_data[20] = #200000 1'b0;
	read_data[20] = #100000 1'b1;
	read_data[20] = #300000 1'b0;
	read_data[20] = #100000 1'b1;
	read_data[20] = #100000 1'b0;
end 
// read_data[ 19 ]
initial
begin
	read_data[19] = 1'b1;
	read_data[19] = #100000 1'b0;
	read_data[19] = #100000 1'b1;
	read_data[19] = #300000 1'b0;
	read_data[19] = #100000 1'b1;
	read_data[19] = #100000 1'b0;
	read_data[19] = #200000 1'b1;
end 
// read_data[ 18 ]
initial
begin
	read_data[18] = 1'b1;
	read_data[18] = #200000 1'b0;
	read_data[18] = #200000 1'b1;
	read_data[18] = #100000 1'b0;
	read_data[18] = #100000 1'b1;
	read_data[18] = #100000 1'b0;
	read_data[18] = #100000 1'b1;
end 
// read_data[ 17 ]
initial
begin
	read_data[17] = 1'b0;
	read_data[17] = #200000 1'b1;
	read_data[17] = #100000 1'b0;
	read_data[17] = #600000 1'b1;
end 
// read_data[ 16 ]
initial
begin
	read_data[16] = 1'b1;
	read_data[16] = #100000 1'b0;
	read_data[16] = #200000 1'b1;
	read_data[16] = #100000 1'b0;
	read_data[16] = #100000 1'b1;
end 
// read_data[ 15 ]
initial
begin
	read_data[15] = 1'b0;
	read_data[15] = #100000 1'b1;
	read_data[15] = #300000 1'b0;
	read_data[15] = #100000 1'b1;
	read_data[15] = #200000 1'b0;
	read_data[15] = #200000 1'b1;
end 
// read_data[ 14 ]
initial
begin
	read_data[14] = 1'b0;
	read_data[14] = #300000 1'b1;
	read_data[14] = #100000 1'b0;
	read_data[14] = #100000 1'b1;
	read_data[14] = #400000 1'b0;
end 
// read_data[ 13 ]
initial
begin
	read_data[13] = 1'b1;
	read_data[13] = #400000 1'b0;
	read_data[13] = #100000 1'b1;
	read_data[13] = #300000 1'b0;
	read_data[13] = #100000 1'b1;
end 
// read_data[ 12 ]
initial
begin
	read_data[12] = 1'b1;
	read_data[12] = #200000 1'b0;
	read_data[12] = #100000 1'b1;
	read_data[12] = #400000 1'b0;
end 
// read_data[ 11 ]
initial
begin
	read_data[11] = 1'b0;
	read_data[11] = #100000 1'b1;
	read_data[11] = #100000 1'b0;
	read_data[11] = #300000 1'b1;
	read_data[11] = #100000 1'b0;
	read_data[11] = #100000 1'b1;
	read_data[11] = #100000 1'b0;
end 
// read_data[ 10 ]
initial
begin
	read_data[10] = 1'b0;
	read_data[10] = #300000 1'b1;
	read_data[10] = #100000 1'b0;
	read_data[10] = #100000 1'b1;
	read_data[10] = #200000 1'b0;
	read_data[10] = #100000 1'b1;
	read_data[10] = #100000 1'b0;
end 
// read_data[ 9 ]
initial
begin
	read_data[9] = 1'b0;
	read_data[9] = #100000 1'b1;
	read_data[9] = #100000 1'b0;
	read_data[9] = #300000 1'b1;
	read_data[9] = #100000 1'b0;
	read_data[9] = #100000 1'b1;
end 
// read_data[ 8 ]
initial
begin
	read_data[8] = 1'b1;
	read_data[8] = #400000 1'b0;
end 
// read_data[ 7 ]
initial
begin
	read_data[7] = 1'b1;
	read_data[7] = #200000 1'b0;
	read_data[7] = #200000 1'b1;
	read_data[7] = #100000 1'b0;
	read_data[7] = #100000 1'b1;
	read_data[7] = #300000 1'b0;
end 
// read_data[ 6 ]
initial
begin
	read_data[6] = 1'b0;
	read_data[6] = #100000 1'b1;
	read_data[6] = #300000 1'b0;
	read_data[6] = #100000 1'b1;
	read_data[6] = #100000 1'b0;
	read_data[6] = #100000 1'b1;
end 
// read_data[ 5 ]
initial
begin
	read_data[5] = 1'b0;
	read_data[5] = #300000 1'b1;
	read_data[5] = #400000 1'b0;
end 
// read_data[ 4 ]
initial
begin
	read_data[4] = 1'b1;
	read_data[4] = #100000 1'b0;
	read_data[4] = #100000 1'b1;
	read_data[4] = #400000 1'b0;
	read_data[4] = #100000 1'b1;
	read_data[4] = #100000 1'b0;
end 
// read_data[ 3 ]
initial
begin
	read_data[3] = 1'b0;
	read_data[3] = #100000 1'b1;
	read_data[3] = #800000 1'b0;
end 
// read_data[ 2 ]
initial
begin
	read_data[2] = 1'b1;
	read_data[2] = #100000 1'b0;
	read_data[2] = #400000 1'b1;
	read_data[2] = #100000 1'b0;
	read_data[2] = #100000 1'b1;
	read_data[2] = #100000 1'b0;
	read_data[2] = #100000 1'b1;
end 
// read_data[ 1 ]
initial
begin
	read_data[1] = 1'b1;
	read_data[1] = #100000 1'b0;
	read_data[1] = #700000 1'b1;
end 
// read_data[ 0 ]
initial
begin
	read_data[0] = 1'b0;
	read_data[0] = #300000 1'b1;
	read_data[0] = #100000 1'b0;
	read_data[0] = #200000 1'b1;
	read_data[0] = #100000 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 

// silent
initial
begin
	silent = 1'b1;
	silent = #150000 1'b0;
	silent = #100000 1'b1;
	silent = #50000 1'b0;
	silent = #100000 1'b1;
	silent = #100000 1'b0;
	silent = #100000 1'b1;
	silent = #50000 1'b0;
	silent = #50000 1'b1;
	silent = #50000 1'b0;
	silent = #50000 1'b1;
	silent = #100000 1'b0;
	silent = #50000 1'b1;
end 
// start_address[ 23 ]
initial
begin
	start_address[23] = 1'b0;
end 
// start_address[ 22 ]
initial
begin
	start_address[22] = 1'b0;
end 
// start_address[ 21 ]
initial
begin
	start_address[21] = 1'b0;
end 
// start_address[ 20 ]
initial
begin
	start_address[20] = 1'b0;
end 
// start_address[ 19 ]
initial
begin
	start_address[19] = 1'b0;
end 
// start_address[ 18 ]
initial
begin
	start_address[18] = 1'b0;
end 
// start_address[ 17 ]
initial
begin
	start_address[17] = 1'b0;
end 
// start_address[ 16 ]
initial
begin
	start_address[16] = 1'b0;
end 
// start_address[ 15 ]
initial
begin
	start_address[15] = 1'b0;
end 
// start_address[ 14 ]
initial
begin
	start_address[14] = 1'b0;
end 
// start_address[ 13 ]
initial
begin
	start_address[13] = 1'b0;
end 
// start_address[ 12 ]
initial
begin
	start_address[12] = 1'b0;
end 
// start_address[ 11 ]
initial
begin
	start_address[11] = 1'b0;
end 
// start_address[ 10 ]
initial
begin
	start_address[10] = 1'b0;
end 
// start_address[ 9 ]
initial
begin
	start_address[9] = 1'b0;
end 
// start_address[ 8 ]
initial
begin
	start_address[8] = 1'b0;
end 
// start_address[ 7 ]
initial
begin
	start_address[7] = 1'b0;
	start_address[7] = #830000 1'b1;
end 
// start_address[ 6 ]
initial
begin
	start_address[6] = 1'b0;
	start_address[6] = #320000 1'b1;
end 
// start_address[ 5 ]
initial
begin
	start_address[5] = 1'b0;
	start_address[5] = #320000 1'b1;
	start_address[5] = #510000 1'b0;
end 
// start_address[ 4 ]
initial
begin
	start_address[4] = 1'b0;
end 
// start_address[ 3 ]
initial
begin
	start_address[3] = 1'b0;
	start_address[3] = #830000 1'b1;
end 
// start_address[ 2 ]
initial
begin
	start_address[2] = 1'b0;
	start_address[2] = #320000 1'b1;
	start_address[2] = #510000 1'b0;
end 
// start_address[ 1 ]
initial
begin
	start_address[1] = 1'b0;
end 
// start_address[ 0 ]
initial
begin
	start_address[0] = 1'b0;
end 

// start_read
initial
begin
	start_read = 1'b1;
	start_read = #4922 1'b0;
	start_read = #4900 1'b1;
	start_read = #5100 1'b0;
	start_read = #4900 1'b1;
	start_read = #2524 1'b0;
	start_read = #6800 1'b1;
	start_read = #854 1'b0;
	start_read = #2531 1'b1;
	start_read = #1550 1'b0;
	start_read = #3450 1'b1;
	start_read = #1550 1'b0;
	start_read = #919 1'b1;
	# 2078;
	repeat(2)
	begin
		start_read = 1'b0;
		start_read = #4133 1'b1;
		# 2533;
	end
	start_read = 1'b0;
	start_read = #4133 1'b1;
	start_read = #457 1'b0;
	start_read = #864 1'b1;
	# 1399;
	repeat(2)
	begin
		start_read = 1'b0;
		start_read = #1934 1'b1;
		# 1399;
	end
	start_read = 1'b0;
	start_read = #1071 1'b1;
	start_read = #3177 1'b0;
	start_read = #6300 1'b1;
	start_read = #523 1'b0;
	start_read = #2789 1'b1;
	start_read = #1700 1'b0;
	start_read = #3300 1'b1;
	start_read = #1700 1'b0;
	start_read = #1150 1'b1;
	# 1333;
	repeat(2)
	begin
		start_read = 1'b0;
		start_read = #2000 1'b1;
		# 1333;
	end
	start_read = 1'b0;
	start_read = #3184 1'b1;
	start_read = #1600 1'b0;
	start_read = #3400 1'b1;
	start_read = #1600 1'b0;
	start_read = #1578 1'b1;
	# 421;
	repeat(2)
	begin
		start_read = 1'b0;
		start_read = #2167 1'b1;
		# 1166;
	end
	start_read = 1'b0;
	start_read = #2167 1'b1;
	start_read = #746 1'b0;
	start_read = #5032 1'b1;
	start_read = #6600 1'b0;
	start_read = #9802 1'b1;
	# 2066;
	repeat(2)
	begin
		start_read = 1'b0;
		start_read = #4600 1'b1;
		# 2066;
	end
	start_read = 1'b0;
	start_read = #3477 1'b1;
	start_read = #1600 1'b0;
	start_read = #3400 1'b1;
	start_read = #1600 1'b0;
	start_read = #3390 1'b1;
	# 3199;
	repeat(2)
	begin
		start_read = 1'b0;
		start_read = #3467 1'b1;
		# 3199;
	end
	start_read = 1'b0;
	start_read = #7953 1'b1;
	start_read = #4100 1'b0;
	start_read = #5900 1'b1;
	start_read = #4100 1'b0;
	start_read = #3486 1'b1;
	start_read = #1600 1'b0;
	start_read = #3400 1'b1;
	start_read = #1600 1'b0;
	start_read = #1031 1'b1;
	# 829;
	repeat(2)
	begin
		start_read = 1'b0;
		start_read = #1534 1'b1;
		# 1799;
	end
	start_read = 1'b0;
	start_read = #1534 1'b1;
	start_read = #3173 1'b0;
	start_read = #4133 1'b1;
	start_read = #2533 1'b0;
	start_read = #4133 1'b1;
	start_read = #2533 1'b0;
	start_read = #4133 1'b1;
	start_read = #333 1'b0;
	start_read = #1246 1'b1;
	start_read = #6000 1'b0;
	start_read = #4000 1'b1;
	start_read = #6000 1'b0;
	start_read = #2754 1'b1;
	start_read = #1906 1'b0;
	start_read = #10800 1'b1;
	start_read = #7294 1'b0;
	start_read = #8558 1'b1;
	start_read = #7000 1'b0;
	start_read = #4442 1'b1;
	start_read = #557 1'b0;
	start_read = #5100 1'b1;
	start_read = #6790 1'b0;
	start_read = #4000 1'b1;
	start_read = #6000 1'b0;
	start_read = #4000 1'b1;
	start_read = #3553 1'b0;
	start_read = #2153 1'b1;
	# 3133;
	repeat(2)
	begin
		start_read = 1'b0;
		start_read = #3533 1'b1;
		# 3133;
	end
	start_read = 1'b0;
	start_read = #1382 1'b1;
	start_read = #2603 1'b0;
	start_read = #6000 1'b1;
	start_read = #4000 1'b0;
	start_read = #6000 1'b1;
	start_read = #2033 1'b0;
	start_read = #4067 1'b1;
	start_read = #2599 1'b0;
	start_read = #4067 1'b1;
	start_read = #2599 1'b0;
	start_read = #4067 1'b1;
	start_read = #2464 1'b0;
	start_read = #4800 1'b1;
	start_read = #5200 1'b0;
	start_read = #4800 1'b1;
	start_read = #4701 1'b0;
	start_read = #1062 1'b1;
	# 999;
	repeat(2)
	begin
		start_read = 1'b0;
		start_read = #2334 1'b1;
		# 999;
	end
	start_read = 1'b0;
	start_read = #1273 1'b1;
	start_read = #1193 1'b0;
	start_read = #2450 1'b1;
	start_read = #2550 1'b0;
	start_read = #2450 1'b1;
	start_read = #2722 1'b0;
	start_read = #2150 1'b1;
	start_read = #2850 1'b0;
	start_read = #2150 1'b1;
	start_read = #1485 1'b0;
	start_read = #1893 1'b1;
	# 2333;
	repeat(2)
	begin
		start_read = 1'b0;
		start_read = #4333 1'b1;
		# 2333;
	end
	start_read = 1'b0;
	start_read = #3401 1'b1;
	# 1866;
	repeat(2)
	begin
		start_read = 1'b0;
		start_read = #1467 1'b1;
		# 1866;
	end
	start_read = 1'b0;
	start_read = #509 1'b1;
	start_read = #1509 1'b0;
	start_read = #3200 1'b1;
	start_read = #1800 1'b0;
	start_read = #3200 1'b1;
	start_read = #982 1'b0;
	start_read = #2950 1'b1;
	start_read = #2050 1'b0;
	start_read = #2950 1'b1;
	start_read = #5158 1'b0;
	start_read = #5900 1'b1;
	start_read = #1059 1'b0;
	start_read = #2450 1'b1;
	start_read = #2550 1'b0;
	start_read = #2450 1'b1;
	start_read = #2549 1'b0;
	start_read = #2134 1'b1;
	start_read = #1199 1'b0;
	start_read = #2134 1'b1;
	start_read = #1199 1'b0;
	start_read = #2134 1'b1;
	start_read = #443 1'b0;
	start_read = #842 1'b1;
	start_read = #5200 1'b0;
	start_read = #4986 1'b1;
	# 1733;
	repeat(2)
	begin
		start_read = 1'b0;
		start_read = #1600 1'b1;
		# 1733;
	end
	start_read = 1'b0;
	start_read = #3536 1'b1;
	# 3599;
	repeat(2)
	begin
		start_read = 1'b0;
		start_read = #3067 1'b1;
		# 3599;
	end
	start_read = 1'b0;
	start_read = #106 1'b1;
	start_read = #3645 1'b0;
	start_read = #12000 1'b1;
	start_read = #5329 1'b0;
	start_read = #1400 1'b1;
	start_read = #1933 1'b0;
	start_read = #1400 1'b1;
	start_read = #1933 1'b0;
	start_read = #1400 1'b1;
	start_read = #10578 1'b0;
	start_read = #8600 1'b1;
	start_read = #1782 1'b0;
	start_read = #866 1'b1;
	start_read = #3100 1'b0;
	start_read = #6900 1'b1;
	start_read = #3100 1'b0;
	start_read = #7301 1'b1;
	# 1066;
	repeat(2)
	begin
		start_read = 1'b0;
		start_read = #2267 1'b1;
		# 1066;
	end
	start_read = 1'b0;
	start_read = #1001 1'b1;
	# 595;
	repeat(2)
	begin
		start_read = 1'b0;
		start_read = #1467 1'b1;
		# 1866;
	end
	start_read = 1'b0;
	start_read = #1467 1'b1;
	start_read = #1822 1'b0;
	start_read = #2334 1'b1;
	start_read = #999 1'b0;
	start_read = #2334 1'b1;
	start_read = #999 1'b0;
	start_read = #2334 1'b1;
	start_read = #3951 1'b0;
	start_read = #5900 1'b1;
	start_read = #4100 1'b0;
	start_read = #5900 1'b1;
	start_read = #1368 1'b0;
	start_read = #1767 1'b1;
	start_read = #1566 1'b0;
	start_read = #1767 1'b1;
	start_read = #1566 1'b0;
	start_read = #1767 1'b1;
	start_read = #4562 1'b0;
	start_read = #4200 1'b1;
	start_read = #5800 1'b0;
	start_read = #4200 1'b1;
	start_read = #3602 1'b0;
	start_read = #3400 1'b1;
	start_read = #3266 1'b0;
	start_read = #3400 1'b1;
	start_read = #3266 1'b0;
	start_read = #3400 1'b1;
	start_read = #1702 1'b0;
	start_read = #468 1'b1;
	start_read = #2550 1'b0;
	start_read = #2450 1'b1;
	start_read = #2550 1'b0;
	start_read = #2700 1'b1;
	# 2266;
	repeat(2)
	begin
		start_read = 1'b0;
		start_read = #4400 1'b1;
		# 2266;
	end
	start_read = 1'b0;
	start_read = #10363 1'b1;
	start_read = #3000 1'b0;
	start_read = #7000 1'b1;
	start_read = #3000 1'b0;
	start_read = #321 1'b1;
	start_read = #111 1'b0;
	start_read = #2750 1'b1;
	start_read = #2250 1'b0;
	start_read = #2750 1'b1;
	start_read = #2139 1'b0;
	start_read = #1178 1'b1;
	start_read = #7000 1'b0;
	start_read = #11822 1'b1;
	start_read = #2435 1'b0;
	start_read = #6700 1'b1;
	start_read = #865 1'b0;
	start_read = #88 1'b1;
	# 1599;
	repeat(2)
	begin
		start_read = 1'b0;
		start_read = #1734 1'b1;
		# 1599;
	end
	start_read = 1'b0;
	start_read = #4920 1'b1;
	start_read = #4500 1'b0;
	start_read = #5500 1'b1;
	start_read = #4500 1'b0;
	start_read = #2227 1'b1;
	start_read = #1235 1'b0;
	start_read = #8800 1'b1;
	start_read = #11964 1'b0;
	start_read = #2800 1'b1;
	start_read = #2200 1'b0;
	start_read = #2800 1'b1;
	start_read = #1295 1'b0;
	start_read = #2000 1'b1;
	start_read = #1333 1'b0;
	start_read = #2000 1'b1;
	start_read = #1333 1'b0;
	start_read = #2000 1'b1;
	start_read = #414 1'b0;
	start_read = #4600 1'b1;
	start_read = #2066 1'b0;
	start_read = #4600 1'b1;
	start_read = #2066 1'b0;
	start_read = #4600 1'b1;
	start_read = #1894 1'b0;
	start_read = #374 1'b1;
	# 1199;
	repeat(2)
	begin
		start_read = 1'b0;
		start_read = #2134 1'b1;
		# 1199;
	end
	start_read = 1'b0;
	start_read = #6935 1'b1;
	start_read = #3100 1'b0;
	start_read = #6900 1'b1;
	start_read = #3100 1'b0;
	start_read = #5347 1'b1;
	start_read = #4600 1'b0;
	start_read = #5596 1'b1;
	start_read = #3700 1'b0;
	start_read = #2483 1'b1;
	start_read = #1151 1'b0;
	start_read = #6800 1'b1;
	start_read = #3200 1'b0;
	start_read = #6800 1'b1;
	start_read = #2049 1'b0;
	start_read = #1879 1'b1;
	start_read = #3000 1'b0;
	start_read = #2000 1'b1;
	start_read = #3000 1'b0;
end 

// timer_finish
initial
begin
	timer_finish = 1'b1;
	timer_finish = #4224 1'b0;
	timer_finish = #5300 1'b1;
	timer_finish = #4700 1'b0;
	timer_finish = #5300 1'b1;
	timer_finish = #476 1'b0;
	timer_finish = #4361 1'b1;
	timer_finish = #8000 1'b0;
	timer_finish = #9007 1'b1;
	# 1099;
	repeat(2)
	begin
		timer_finish = 1'b0;
		timer_finish = #2234 1'b1;
		# 1099;
	end
	timer_finish = 1'b0;
	timer_finish = #867 1'b1;
	timer_finish = #2553 1'b0;
	timer_finish = #11600 1'b1;
	timer_finish = #5847 1'b0;
	timer_finish = #1226 1'b1;
	# 1866;
	repeat(2)
	begin
		timer_finish = 1'b0;
		timer_finish = #1467 1'b1;
		# 1866;
	end
	timer_finish = 1'b0;
	timer_finish = #242 1'b1;
	timer_finish = #1884 1'b0;
	timer_finish = #6800 1'b1;
	timer_finish = #3200 1'b0;
	timer_finish = #6800 1'b1;
	timer_finish = #1316 1'b0;
	timer_finish = #922 1'b1;
	timer_finish = #3600 1'b0;
	timer_finish = #5478 1'b1;
	timer_finish = #265 1'b0;
	timer_finish = #6000 1'b1;
	timer_finish = #3735 1'b0;
	timer_finish = #3512 1'b1;
	timer_finish = #4400 1'b0;
	timer_finish = #2088 1'b1;
	timer_finish = #5306 1'b0;
	timer_finish = #11200 1'b1;
	timer_finish = #11257 1'b0;
	timer_finish = #11200 1'b1;
	timer_finish = #2279 1'b0;
	timer_finish = #4000 1'b1;
	timer_finish = #6000 1'b0;
	timer_finish = #4000 1'b1;
	timer_finish = #9074 1'b0;
	timer_finish = #10600 1'b1;
	timer_finish = #5530 1'b0;
	timer_finish = #5300 1'b1;
	timer_finish = #4254 1'b0;
	timer_finish = #322 1'b1;
	# 1466;
	repeat(2)
	begin
		timer_finish = 1'b0;
		timer_finish = #1867 1'b1;
		# 1466;
	end
	timer_finish = 1'b0;
	timer_finish = #1546 1'b1;
	timer_finish = #1 1'b0;
	timer_finish = #2700 1'b1;
	timer_finish = #2300 1'b0;
	timer_finish = #2700 1'b1;
	timer_finish = #2410 1'b0;
	timer_finish = #3000 1'b1;
	timer_finish = #2000 1'b0;
	timer_finish = #3000 1'b1;
	timer_finish = #3295 1'b0;
	timer_finish = #3000 1'b1;
	timer_finish = #2000 1'b0;
	timer_finish = #3000 1'b1;
	timer_finish = #3070 1'b0;
	timer_finish = #2000 1'b1;
	timer_finish = #3000 1'b0;
	timer_finish = #2000 1'b1;
	timer_finish = #2031 1'b0;
	timer_finish = #1800 1'b1;
	timer_finish = #1533 1'b0;
	timer_finish = #1800 1'b1;
	timer_finish = #1533 1'b0;
	timer_finish = #1800 1'b1;
	timer_finish = #27 1'b0;
	timer_finish = #3825 1'b1;
	timer_finish = #5300 1'b0;
	timer_finish = #4700 1'b1;
	timer_finish = #5300 1'b0;
	timer_finish = #875 1'b1;
	# 834;
	repeat(2)
	begin
		timer_finish = 1'b0;
		timer_finish = #2134 1'b1;
		# 1199;
	end
	timer_finish = 1'b0;
	timer_finish = #2134 1'b1;
	timer_finish = #366 1'b0;
	timer_finish = #347 1'b1;
	# 1633;
	repeat(2)
	begin
		timer_finish = 1'b0;
		timer_finish = #1700 1'b1;
		# 1633;
	end
	timer_finish = 1'b0;
	timer_finish = #1354 1'b1;
	# 1710;
	repeat(2)
	begin
		timer_finish = 1'b0;
		timer_finish = #4400 1'b1;
		# 2266;
	end
	timer_finish = 1'b0;
	timer_finish = #4400 1'b1;
	timer_finish = #558 1'b0;
	timer_finish = #2293 1'b1;
	timer_finish = #1600 1'b0;
	timer_finish = #3400 1'b1;
	timer_finish = #1600 1'b0;
	timer_finish = #5408 1'b1;
	# 2133;
	repeat(2)
	begin
		timer_finish = 1'b0;
		timer_finish = #4533 1'b1;
		# 2133;
	end
	timer_finish = 1'b0;
	timer_finish = #2048 1'b1;
	timer_finish = #4600 1'b0;
	timer_finish = #3586 1'b1;
	# 2999;
	repeat(2)
	begin
		timer_finish = 1'b0;
		timer_finish = #3400 1'b1;
		# 3266;
	end
	timer_finish = 1'b0;
	timer_finish = #3400 1'b1;
	timer_finish = #269 1'b0;
	timer_finish = #626 1'b1;
	timer_finish = #7200 1'b0;
	timer_finish = #13011 1'b1;
	# 1766;
	repeat(2)
	begin
		timer_finish = 1'b0;
		timer_finish = #1567 1'b1;
		# 1766;
	end
	timer_finish = 1'b0;
	timer_finish = #731 1'b1;
	# 1328;
	repeat(2)
	begin
		timer_finish = 1'b0;
		timer_finish = #1700 1'b1;
		# 1633;
	end
	timer_finish = 1'b0;
	timer_finish = #1700 1'b1;
	timer_finish = #1656 1'b0;
	timer_finish = #2100 1'b1;
	timer_finish = #2900 1'b0;
	timer_finish = #2100 1'b1;
	timer_finish = #2248 1'b0;
	timer_finish = #3350 1'b1;
	timer_finish = #1650 1'b0;
	timer_finish = #3350 1'b1;
	timer_finish = #2426 1'b0;
	timer_finish = #6000 1'b1;
	timer_finish = #3079 1'b0;
	timer_finish = #2750 1'b1;
	timer_finish = #2250 1'b0;
	timer_finish = #2750 1'b1;
	timer_finish = #3524 1'b0;
	timer_finish = #4400 1'b1;
	timer_finish = #3773 1'b0;
	timer_finish = #1221 1'b1;
	timer_finish = #2900 1'b0;
	timer_finish = #2100 1'b1;
	timer_finish = #2900 1'b0;
	timer_finish = #879 1'b1;
	timer_finish = #65 1'b0;
	timer_finish = #2900 1'b1;
	timer_finish = #2100 1'b0;
	timer_finish = #2900 1'b1;
	timer_finish = #4821 1'b0;
	timer_finish = #3400 1'b1;
	timer_finish = #3266 1'b0;
	timer_finish = #3400 1'b1;
	timer_finish = #3266 1'b0;
	timer_finish = #3400 1'b1;
	timer_finish = #482 1'b0;
	timer_finish = #2403 1'b1;
	timer_finish = #10000 1'b0;
	timer_finish = #10328 1'b1;
	# 3199;
	repeat(2)
	begin
		timer_finish = 1'b0;
		timer_finish = #3467 1'b1;
		# 3199;
	end
	timer_finish = 1'b0;
	timer_finish = #738 1'b1;
	timer_finish = #1298 1'b0;
	timer_finish = #2950 1'b1;
	timer_finish = #2050 1'b0;
	timer_finish = #2950 1'b1;
	timer_finish = #3917 1'b0;
	timer_finish = #5400 1'b1;
	timer_finish = #2543 1'b0;
	timer_finish = #1534 1'b1;
	timer_finish = #1799 1'b0;
	timer_finish = #1534 1'b1;
	timer_finish = #1799 1'b0;
	timer_finish = #1534 1'b1;
	timer_finish = #692 1'b0;
	timer_finish = #4948 1'b1;
	timer_finish = #9600 1'b0;
	timer_finish = #5452 1'b1;
	# 90;
	repeat(2)
	begin
		timer_finish = 1'b0;
		timer_finish = #2134 1'b1;
		# 1199;
	end
	timer_finish = 1'b0;
	timer_finish = #2134 1'b1;
	timer_finish = #2126 1'b0;
	timer_finish = #1700 1'b1;
	timer_finish = #1633 1'b0;
	timer_finish = #1700 1'b1;
	timer_finish = #1633 1'b0;
	timer_finish = #1700 1'b1;
	timer_finish = #5445 1'b0;
	timer_finish = #4800 1'b1;
	timer_finish = #5200 1'b0;
	timer_finish = #4800 1'b1;
	timer_finish = #2630 1'b0;
	timer_finish = #3533 1'b1;
	timer_finish = #3133 1'b0;
	timer_finish = #3533 1'b1;
	timer_finish = #3133 1'b0;
	timer_finish = #3533 1'b1;
	timer_finish = #1869 1'b0;
	timer_finish = #2550 1'b1;
	timer_finish = #2450 1'b0;
	timer_finish = #2550 1'b1;
	timer_finish = #1785 1'b0;
	timer_finish = #1734 1'b1;
	timer_finish = #1599 1'b0;
	timer_finish = #1734 1'b1;
	timer_finish = #1599 1'b0;
	timer_finish = #1734 1'b1;
	timer_finish = #1274 1'b0;
	timer_finish = #404 1'b1;
	timer_finish = #2200 1'b0;
	timer_finish = #2800 1'b1;
	timer_finish = #2200 1'b0;
	timer_finish = #2396 1'b1;
	timer_finish = #1242 1'b0;
	timer_finish = #10800 1'b1;
	timer_finish = #10602 1'b0;
	timer_finish = #4000 1'b1;
	timer_finish = #6000 1'b0;
	timer_finish = #4000 1'b1;
	timer_finish = #3356 1'b0;
	timer_finish = #216 1'b1;
	timer_finish = #1650 1'b0;
	timer_finish = #3350 1'b1;
	timer_finish = #1650 1'b0;
	timer_finish = #3134 1'b1;
	timer_finish = #2765 1'b0;
	timer_finish = #2050 1'b1;
	timer_finish = #2950 1'b0;
	timer_finish = #2050 1'b1;
	timer_finish = #12028 1'b0;
	timer_finish = #8000 1'b1;
	timer_finish = #157 1'b0;
	timer_finish = #5151 1'b1;
	timer_finish = #3600 1'b0;
	timer_finish = #6400 1'b1;
	timer_finish = #3600 1'b0;
	timer_finish = #2858 1'b1;
	# 2666;
	repeat(2)
	begin
		timer_finish = 1'b0;
		timer_finish = #4000 1'b1;
		# 2666;
	end
	timer_finish = 1'b0;
	timer_finish = #4599 1'b1;
	timer_finish = #5100 1'b0;
	timer_finish = #5630 1'b1;
	# 3466;
	repeat(2)
	begin
		timer_finish = 1'b0;
		timer_finish = #3200 1'b1;
		# 3466;
	end
	timer_finish = 1'b0;
	timer_finish = #266 1'b1;
	# 826;
	repeat(2)
	begin
		timer_finish = 1'b0;
		timer_finish = #3467 1'b1;
		# 3199;
	end
	timer_finish = 1'b0;
	timer_finish = #3467 1'b1;
	timer_finish = #2375 1'b0;
	timer_finish = #4868 1'b1;
	timer_finish = #3000 1'b0;
	timer_finish = #6772 1'b1;
	timer_finish = #4400 1'b0;
	timer_finish = #1838 1'b1;
	timer_finish = #2150 1'b0;
	timer_finish = #2850 1'b1;
	timer_finish = #2150 1'b0;
	timer_finish = #1972 1'b1;
	# 1433;
	repeat(2)
	begin
		timer_finish = 1'b0;
		timer_finish = #1634 1'b1;
		# 1699;
	end
	timer_finish = 1'b0;
	timer_finish = #1634 1'b1;
	timer_finish = #267 1'b0;
	timer_finish = #6044 1'b1;
	timer_finish = #3500 1'b0;
	timer_finish = #6500 1'b1;
	timer_finish = #3500 1'b0;
	timer_finish = #456 1'b1;
	timer_finish = #2077 1'b0;
	timer_finish = #6400 1'b1;
	timer_finish = #3600 1'b0;
	timer_finish = #6400 1'b1;
	timer_finish = #2121 1'b0;
	timer_finish = #1767 1'b1;
	timer_finish = #1566 1'b0;
	timer_finish = #1767 1'b1;
	timer_finish = #1566 1'b0;
	timer_finish = #1767 1'b1;
	timer_finish = #4006 1'b0;
	timer_finish = #3600 1'b1;
	timer_finish = #3066 1'b0;
	timer_finish = #3600 1'b1;
	timer_finish = #3066 1'b0;
	timer_finish = #3600 1'b1;
	timer_finish = #31 1'b0;
	timer_finish = #2041 1'b1;
	# 1266;
	repeat(2)
	begin
		timer_finish = 1'b0;
		timer_finish = #2067 1'b1;
		# 1266;
	end
	timer_finish = 1'b0;
end 

ipod_fsm_vlg_sample_tst tb_sample (
	.addr_reset(addr_reset),
	.aud_clk_22khz(aud_clk_22khz),
	.clock(clock),
	.direction(direction),
	.end_address(end_address),
	.pause(pause),
	.pico_done(pico_done),
	.read_data(read_data),
	.reset(reset),
	.silent(silent),
	.start_address(start_address),
	.start_read(start_read),
	.timer_finish(timer_finish),
	.sampler_tx(sampler)
);

ipod_fsm_vlg_check_tst tb_out(
	.address(address),
	.aud_data_out(aud_data_out),
	.audio_finish(audio_finish),
	.byteenable(byteenable),
	.mem_read(mem_read),
	.pico_flag(pico_flag),
	.read_data_request(read_data_request),
	.state(state),
	.visual_start(visual_start),
	.sampler_rx(sampler)
);
endmodule

